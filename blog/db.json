{"meta":{"version":1,"warehouse":"4.0.1"},"models":{"Asset":[{"_id":"themes/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/css/noscript.styl","path":"css/noscript.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/avatar.png","path":"images/avatar.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/comments.js","path":"js/comments.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/config.js","path":"js/config.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/pjax.js","path":"js/pjax.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/schedule.js","path":"js/schedule.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/rating.js","path":"js/third-party/rating.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/chat/gitter.js","path":"js/third-party/chat/gitter.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/tags/index.md","hash":"184ec6d35070f13ea3f8374a88d0b47f59c8afa9","modified":1652449955019},{"_id":"source/_posts/CURL指南.md","hash":"cdd3a69292be052f66ca80f5bdc803598f2b5766","modified":1652888531414},{"_id":"source/_posts/GO编译时参数.md","hash":"cd4b07d2ffa4fafbdfa7a146ba528a3817afbac5","modified":1652450067230},{"_id":"source/categories/index.md","hash":"52bdda462333d97456a7a0eab5850c14f2a3d6d4","modified":1652449820865},{"_id":"source/_posts/GO错误异常处理.md","hash":"a561dbefaa4fba0de1a07d00d5efdbe23265f45c","modified":1652543099812},{"_id":"source/_posts/Time包使用示例.md","hash":"d04522a169523d28c80cdce16f262014921aeb8a","modified":1652578449524},{"_id":"themes/hexo-theme-next/.gitignore","hash":"417520c4dbbeab9c7e3ab10d944da0886366a0ee","modified":1652256820000},{"_id":"themes/hexo-theme-next/.gitattributes","hash":"ec43734985e1cafd53d88ded3020103f7416123c","modified":1652256820000},{"_id":"themes/hexo-theme-next/.eslintrc.json","hash":"9c0762486f24a8c5e60f8b6c875e4c4728942649","modified":1652256820000},{"_id":"themes/hexo-theme-next/_config.yml","hash":"96c84fa44a79ff87ff8330891052c2674972254e","modified":1652451099518},{"_id":"themes/hexo-theme-next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1652256820000},{"_id":"themes/hexo-theme-next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":1652256820000},{"_id":"themes/hexo-theme-next/_vendors.yml","hash":"bd8c9077ea59f836a6384d991178dfc22c7ad642","modified":1652256820000},{"_id":"themes/hexo-theme-next/package.json","hash":"cad27a427487eb491b6309773296a478c1caf068","modified":1652256820000},{"_id":"themes/hexo-theme-next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1652256820000},{"_id":"themes/hexo-theme-next/README.md","hash":"fb9016c2af9687beb68af174506ae54b11b8dbdf","modified":1652256820000},{"_id":"themes/hexo-theme-next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1652256820000},{"_id":"themes/hexo-theme-next/.githooks/pre-commit","hash":"f473eac1aaaa96c947d67988bbed140bbab1a821","modified":1652256820000},{"_id":"themes/hexo-theme-next/renovate.json","hash":"cb29cc16e61b0b8a6dac34657d76822ae29ad5aa","modified":1652256820000},{"_id":"themes/hexo-theme-next/.githooks/install.js","hash":"4d77dbddf2eac1f3fc78f151d12ed22208ed655b","modified":1652256820000},{"_id":"themes/hexo-theme-next/.github/PULL_REQUEST_TEMPLATE.md","hash":"3e9fbb78e3dee0ca1dc886d0c28b0148ba0ca499","modified":1652256820000},{"_id":"themes/hexo-theme-next/.github/CODE_OF_CONDUCT.md","hash":"21cbff565a0445d3a880fff1ee417e309740a9ab","modified":1652256820000},{"_id":"themes/hexo-theme-next/.github/config.yml","hash":"7984e665e9de481a0e0e51fca5668337713f810b","modified":1652256820000},{"_id":"themes/hexo-theme-next/.github/label-commenter-config.yml","hash":"1097fc47beeacfc1edb0248c27b17bf64bde3565","modified":1652256820000},{"_id":"themes/hexo-theme-next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1652256820000},{"_id":"themes/hexo-theme-next/languages/bn.yml","hash":"b5e2a35eb6fff56b6e32ce479e63b6fc5e44d5cb","modified":1652256820000},{"_id":"themes/hexo-theme-next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1652256820000},{"_id":"themes/hexo-theme-next/.github/release-drafter.yml","hash":"423275ec021104b263cd88776936a8c8d6872b66","modified":1652256820000},{"_id":"themes/hexo-theme-next/.github/labeler.yml","hash":"5c4bc2bd561e6d9b33ee118cc12218c5de46f72d","modified":1652256820000},{"_id":"themes/hexo-theme-next/languages/default.yml","hash":"814d81c27fed736055ee300e0a6505b26ff4313c","modified":1652256820000},{"_id":"themes/hexo-theme-next/languages/ar.yml","hash":"bca66db21c015dbd32970d8708b898518a773e1e","modified":1652256820000},{"_id":"themes/hexo-theme-next/languages/id.yml","hash":"14e794db4eca36b257994d81eb513e61d1edcbd6","modified":1652256820000},{"_id":"themes/hexo-theme-next/languages/fr.yml","hash":"b15dc05afdc94de02e5d3fee4f8d3dc5594dd37e","modified":1652256820000},{"_id":"themes/hexo-theme-next/languages/es.yml","hash":"b813da5aed9d73b809133db4dfb08f90ec56afd9","modified":1652256820000},{"_id":"themes/hexo-theme-next/languages/fa.yml","hash":"6456d40dd42f44101d9d6e7054e9884e9163f948","modified":1652256820000},{"_id":"themes/hexo-theme-next/languages/de.yml","hash":"4be7b8b76c81bf1853eb36d2e874b17546a0e792","modified":1652256820000},{"_id":"themes/hexo-theme-next/languages/ja.yml","hash":"d48c4157e0e02e847aac7b513580d3364c81948c","modified":1652256820000},{"_id":"themes/hexo-theme-next/languages/it.yml","hash":"c1eeab4992c76bfd436bb205ce58b1cfeef55ee6","modified":1652256820000},{"_id":"themes/hexo-theme-next/languages/nl.yml","hash":"ecb8e39c6225f3c068a5fdd569ee7dafd5c41a1f","modified":1652256820000},{"_id":"themes/hexo-theme-next/languages/ko.yml","hash":"819c19eb9d142e5411f77cf3821d90f740ee114a","modified":1652256820000},{"_id":"themes/hexo-theme-next/languages/pt-BR.yml","hash":"a1f27b3a592fc58f17d247f5563ff4a90a3da5f2","modified":1652256820000},{"_id":"themes/hexo-theme-next/languages/ru.yml","hash":"8c2b6361f2de17561c1a3eede2bf47b4e2ba6ce5","modified":1652256820000},{"_id":"themes/hexo-theme-next/languages/en.yml","hash":"814d81c27fed736055ee300e0a6505b26ff4313c","modified":1652256820000},{"_id":"themes/hexo-theme-next/languages/tr.yml","hash":"0bebba73d6f06c7dad61f80c0d7ad5f6f1791a01","modified":1652256820000},{"_id":"themes/hexo-theme-next/languages/zh-TW.yml","hash":"92256b90028de9a1e79c6bc0e5885b93e7fb4b17","modified":1652256820000},{"_id":"themes/hexo-theme-next/languages/uk.yml","hash":"7dd24580c0865c5a7bc4d391855045366a598936","modified":1652256820000},{"_id":"themes/hexo-theme-next/languages/vi.yml","hash":"c669c34da544a563ceae3e196addc9df6a78e024","modified":1652256820000},{"_id":"themes/hexo-theme-next/languages/zh-CN.yml","hash":"5a3ab21210304efef736e96bad254f789f42c567","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/_layout.njk","hash":"20e4160cd0deb4fa272cc3aed0f43520b3cf4a9c","modified":1652256820000},{"_id":"themes/hexo-theme-next/languages/tk.yml","hash":"519239e35c3bda7b62b00ff5d34644f45b16fe6a","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/index.njk","hash":"dd63e488ae8cc144335a5958acedf6a16edd7a92","modified":1652256820000},{"_id":"themes/hexo-theme-next/languages/zh-HK.yml","hash":"f195bb0502ffe66e850077a1af1033455ea65f93","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/post.njk","hash":"6abeb85fb3e4c382ed4bb6049b12a807e6226e67","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/page.njk","hash":"6c40aa438c658eb7f0cd0f6a759f18b43e7e8f93","modified":1652256820000},{"_id":"themes/hexo-theme-next/languages/si.yml","hash":"615d18d044f44df476d6bfbf73f7b0edc2632168","modified":1652256820000},{"_id":"themes/hexo-theme-next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":1652256820000},{"_id":"themes/hexo-theme-next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/tag.njk","hash":"9e16ba20c28a7f2c6bc75aa427f48122301a30aa","modified":1652256820000},{"_id":"themes/hexo-theme-next/.github/CONTRIBUTING.md","hash":"330656d93b6c03df9fb1f2f0e3534c971969473b","modified":1652256820000},{"_id":"themes/hexo-theme-next/languages/pt.yml","hash":"63a3e1e728ba5e6e22150de7331bb8a654f34960","modified":1652256820000},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"4ecac91716eac59d7c2bc53cf6e95612d44da97b","modified":1652256820000},{"_id":"themes/hexo-theme-next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1652256820000},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"fc4dce84ed9a5d21d3a8833ff6d776c46f876115","modified":1652256820000},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE/other.md","hash":"8cc5b5c116f6a052865a324512362f145d699202","modified":1652256820000},{"_id":"themes/hexo-theme-next/.github/workflows/linter.yml","hash":"b6c111344bc0f3500ca69d7590791ff85ef1090d","modified":1652256820000},{"_id":"themes/hexo-theme-next/.github/workflows/tester.yml","hash":"80a20c3a7522249f051a48239db41d1317e9b552","modified":1652256820000},{"_id":"themes/hexo-theme-next/.github/workflows/release-drafter.yml","hash":"4f3af81009cb922be91f718a67425377515ea69d","modified":1652256820000},{"_id":"themes/hexo-theme-next/.github/workflows/labeler.yml","hash":"e9d51e93f239a2d4b69722c69db3463b4baf0f4c","modified":1652256820000},{"_id":"themes/hexo-theme-next/test/index.js","hash":"6bf0289846538be3e9a63809af98f00e1fbdd90b","modified":1652256820000},{"_id":"themes/hexo-theme-next/.github/workflows/lock.yml","hash":"e48d1ced9a673d3f0911a700d3e68c0f4ca79263","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/_macro/post-collapse.njk","hash":"1a30d751871dabfa80940042ddb1f77d07d830b9","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/_macro/post.njk","hash":"434b3e76a040a816169e1929657e4176e7b8164c","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/_partials/comments.njk","hash":"d0c470b0f6690aa217e9ada848c5e2e73fb27c6f","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/_partials/pagination.njk","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/_partials/footer.njk","hash":"19713f472972caac33ae5fbcfe9105da61257de4","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/_partials/widgets.njk","hash":"852a750524decf1efa587cd52b09e387ed8315de","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/_scripts/index.njk","hash":"6668878a0f9a1166c6a879755f54a08d942da870","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/_scripts/vendors.njk","hash":"be80b9fe415a9a09d74c28e230995fd292dfc123","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/_third-party/rating.njk","hash":"1bcdbc7fde26d6d9ef4e7fa43ffcff5a9506b20e","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/_macro/sidebar.njk","hash":"eb786e8b35e354287cda345c524cd35ec955f692","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/_third-party/index.njk","hash":"d41eeb262978e34de4679d8971a9e7ac5d90ecbc","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/_third-party/pace.njk","hash":"d7ad5714079f7f65446f880baf14722435ca9061","modified":1652256820000},{"_id":"themes/hexo-theme-next/scripts/events/index.js","hash":"3ce10d4cce94e3d4c482c2e18bb6f0f0ca380d3d","modified":1652256820000},{"_id":"themes/hexo-theme-next/.github/workflows/label-commenter.yml","hash":"434cc0674290958b1e9bbc46c3486f073c0722db","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/_third-party/fancybox.njk","hash":"844559f46e2ff1c8be234d5763703106e2072a7b","modified":1652256820000},{"_id":"themes/hexo-theme-next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1652256820000},{"_id":"themes/hexo-theme-next/scripts/filters/locals.js","hash":"9eb5310664759931287dd28ea39165dfb67f12ed","modified":1652256820000},{"_id":"themes/hexo-theme-next/scripts/filters/minify.js","hash":"3abdcb715562414063e0fb3eeb6244ce59c477e0","modified":1652256820000},{"_id":"themes/hexo-theme-next/docs/ru/README.md","hash":"3125f0cb4cdb448d9b92292f64d7612013fdd165","modified":1652256820000},{"_id":"themes/hexo-theme-next/scripts/helpers/font.js","hash":"3394185a7f0393c16ce52c8028f90da3e9239c55","modified":1652256820000},{"_id":"themes/hexo-theme-next/docs/zh-CN/README.md","hash":"ef609aa9174ad61b7ab0bb578de57fec86d9b767","modified":1652256820000},{"_id":"themes/hexo-theme-next/scripts/helpers/navigation.js","hash":"78107021101553c3d23e89290f7530b60cf4aa86","modified":1652256820000},{"_id":"themes/hexo-theme-next/scripts/helpers/next-config.js","hash":"9a07f2d979fc8fe0c5e07d48304187b9b03ea7ff","modified":1652256820000},{"_id":"themes/hexo-theme-next/scripts/helpers/next-vendors.js","hash":"afdd6a188a74c188f0dd154fac70efd4080ca262","modified":1652256820000},{"_id":"themes/hexo-theme-next/scripts/helpers/next-url.js","hash":"a11b71ba0c5012e2cdcab31c15439156b215563e","modified":1652256820000},{"_id":"themes/hexo-theme-next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1652256820000},{"_id":"themes/hexo-theme-next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1652256820000},{"_id":"themes/hexo-theme-next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1652256820000},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE/config.yml","hash":"c40ae7903b6cc99f94c9d45ac7ba8c2850bb1309","modified":1652256820000},{"_id":"themes/hexo-theme-next/scripts/helpers/engine.js","hash":"d292b78485e8e8055712b0ed6de7cf559c5fbdcd","modified":1652256820000},{"_id":"themes/hexo-theme-next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/category.njk","hash":"c68b7343d0f8145010f93351908cc36ef6212ec1","modified":1652256820000},{"_id":"themes/hexo-theme-next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7a06d443f374bd1e84294067a0ac796afd9fbe60","modified":1652256820000},{"_id":"themes/hexo-theme-next/scripts/tags/index.js","hash":"17f9451ce1f10f78437f52218757d38d4e1591b0","modified":1652256820000},{"_id":"themes/hexo-theme-next/scripts/tags/mermaid.js","hash":"4fb01ca650fa8b256b8d48f50dc1b18350bd3d6d","modified":1652256820000},{"_id":"themes/hexo-theme-next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":1652256820000},{"_id":"themes/hexo-theme-next/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":1652256820000},{"_id":"themes/hexo-theme-next/scripts/tags/group-pictures.js","hash":"9ed799c329abf830f623689d7e136991256a24ca","modified":1652256820000},{"_id":"themes/hexo-theme-next/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":1652256820000},{"_id":"themes/hexo-theme-next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_mixins.styl","hash":"32d31cb5a155681c19f5ad0bb56dcb08429f93ef","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/main.styl","hash":"78ce791cc4ac95386cf6839ca72f5f7b51f86ee9","modified":1652256820000},{"_id":"themes/hexo-theme-next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_colors.styl","hash":"3c6798c10cc220d83481cb3f3782e78558cee789","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/noscript.styl","hash":"76bba5d7916e9930e68215a0fce3a7d81c44510f","modified":1652256820000},{"_id":"themes/hexo-theme-next/docs/zh-CN/CONTRIBUTING.md","hash":"a089f7a8368ab0b7d7b9b7ec0ac3767a453435df","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/js/pjax.js","hash":"919f5281c4a04d11cfd94573ecf57b3dbabd3cc8","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1652256820000},{"_id":"themes/hexo-theme-next/scripts/filters/post.js","hash":"30e03a1d4828259f82d46e64cbfe2955b6cff9a9","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/js/next-boot.js","hash":"48497e2156a10155dc42311633a110c9685692c9","modified":1652256820000},{"_id":"themes/hexo-theme-next/test/helpers/index.js","hash":"63ba28afed697f7b3574436b1133b8ecc9c0c357","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":1652256820000},{"_id":"themes/hexo-theme-next/test/helpers/next-url.js","hash":"a91d880cb75e0a8e65a7be4c7362b2c8ebfb7c4f","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/js/utils.js","hash":"e447160d342b1f93df5214b6a733441039ced439","modified":1652256820000},{"_id":"themes/hexo-theme-next/test/tags/center-quote.js","hash":"7667342fd1a1417eaf6a254012b84ae40e8d13dd","modified":1652256820000},{"_id":"themes/hexo-theme-next/test/tags/button.js","hash":"48f2aa4c513e9e24bd6a811410520b74cd7ea88b","modified":1652256820000},{"_id":"themes/hexo-theme-next/test/helpers/font.js","hash":"342ef3c6fd2dcca2a8802a516ed6d7f389fd2ca2","modified":1652256820000},{"_id":"themes/hexo-theme-next/test/tags/index.js","hash":"e8779e54f0979b221858f8bb74dd081bb503b910","modified":1652256820000},{"_id":"themes/hexo-theme-next/test/tags/group-pictures.js","hash":"5c68ae0184f9da6e00ba199f2554d503d8e6da71","modified":1652256820000},{"_id":"themes/hexo-theme-next/test/tags/note.js","hash":"3dcfcd65bf9f326972ea7571fdb1444200f5d07e","modified":1652256820000},{"_id":"themes/hexo-theme-next/test/tags/mermaid.js","hash":"ab77be5f3c6d9a57c7b9dda6decf1906a736fef9","modified":1652256820000},{"_id":"themes/hexo-theme-next/test/tags/link-grid.js","hash":"43d298fafb7c45a874b766d443843bd26346e689","modified":1652256820000},{"_id":"themes/hexo-theme-next/test/tags/label.js","hash":"4ebf3698c258ca978b997acbdd0dece44069c09d","modified":1652256820000},{"_id":"themes/hexo-theme-next/test/tags/caniuse.js","hash":"aa5e728445caeaf7c2ccd0f3fcb2cad0c93ca6d1","modified":1652256820000},{"_id":"themes/hexo-theme-next/test/tags/video.js","hash":"b796fc4dceb20a30e730c322bb5474c0162464cc","modified":1652256820000},{"_id":"themes/hexo-theme-next/test/tags/pdf.js","hash":"fd6ea5123560a90f7e7c1eface23dbe1455db25f","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/_partials/header/brand.njk","hash":"aff4613756456be26415febc668860fdab8d33c5","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/_partials/head/head.njk","hash":"0ba2bf0266f1fcb8edbd961869f8521b29685c56","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/_partials/header/menu-item.njk","hash":"41a8b0cc16f60fa085cb719d07216d86b6bc4bf8","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/_partials/header/menu.njk","hash":"ee6fc2f111572d3eeab0a2fecbb2d6b3e37ab26b","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/_partials/header/index.njk","hash":"650de421a8ce4cf685428ffbe0087ff84cbd1356","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/_partials/header/sub-menu.njk","hash":"06480d8ec5f0b87eafd47f082f07968d7282dd5c","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/_partials/page/breadcrumb.njk","hash":"89825e75cc45e9709fa6ba89883669eedaff6f46","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/_partials/page/schedule.njk","hash":"0f4bc8e257da60f77c0c1738607b2bde55810684","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/_partials/head/head-unique.njk","hash":"8da52a144060db1a0a088ccb2e6cc8376d1fce70","modified":1652256820000},{"_id":"themes/hexo-theme-next/test/validate/index.js","hash":"5a95ccc8598667535bd022e988055c0e019f3670","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/_partials/search/index.njk","hash":"8f6f256ab3b351ffc80f1f3f1d9834e9a7cfac31","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1652256820000},{"_id":"themes/hexo-theme-next/test/tags/tabs.js","hash":"d63722919f9da2e44d6b952801e10a2915ea9c12","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/_partials/search/algolia-search.njk","hash":"efb2b6f19df02ba5ae623a1f274fff52aed21e6f","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/_partials/post/post-copyright.njk","hash":"133942922e34abae9e4de7ea5591d77c0caa4b37","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/_partials/post/post-footer.njk","hash":"bde2c7356d9362972bde41cc206d5816f8ed714d","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/_partials/post/post-followme.njk","hash":"154df0bb323c332d8c25343f258ee865e5553423","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/_partials/post/post-meta.njk","hash":"9fa47e4fb342811da590ee4adc91cf81118c0a39","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/_partials/post/post-reward.njk","hash":"002b51d0cae3f2e2e008bdc58be90c728282de5b","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/_partials/post/post-related.njk","hash":"57eca76cfbbe9a65bc2a77f1deebf003ed335673","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/cloudflare.njk","hash":"c978e9efd472c4825f93b83524b11f1c4f7efaab","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/_partials/search/localsearch.njk","hash":"661f7acae43f0be694266323320f977d84119abe","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/index.njk","hash":"45477a04cf2b3c077061c8c3ada216c1ae288e0e","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/_third-party/chat/tidio.njk","hash":"02aab857c27fc103216029be991688b12a73a525","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/microsoft-clarity.njk","hash":"9dc00fcb0a05899f048eace9f9160b78956655d5","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/_third-party/chat/chatra.njk","hash":"d7263fca16d0278ccf1f6aa1c6df6902a6344a09","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/_third-party/chat/gitter.njk","hash":"f8cc14b7aa949999a1faaeb7855e2f20b59a386d","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/_third-party/math/katex.njk","hash":"d82c24136bbd3443b85f07f5579845833b594684","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/_partials/sidebar/site-overview.njk","hash":"3d8591bb92df77ceb9d5b07bc76da1ca89e5bd76","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/_third-party/search/algolia-search.njk","hash":"24ed76e0c72a25ac152820c750a05826a706b6f4","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/_third-party/search/localsearch.njk","hash":"e45ea3542cdc9ed7ec8447b5e6f35df4c5e82758","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":1652256820000},{"_id":"themes/hexo-theme-next/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":1652256820000},{"_id":"themes/hexo-theme-next/scripts/events/lib/highlight.js","hash":"6aec7b2c38c50989a23bfaa0d560e75c7f553e12","modified":1652256820000},{"_id":"themes/hexo-theme-next/scripts/events/lib/navigation.js","hash":"dd3562686d95a50375e6fd32e717ccb0d99c1e3d","modified":1652256820000},{"_id":"themes/hexo-theme-next/scripts/events/lib/vendors.js","hash":"0d94ac5daa95f99046d66160d9f0f34ee786736c","modified":1652256820000},{"_id":"themes/hexo-theme-next/scripts/events/lib/config.js","hash":"c8b59b404f5d2a0b3b5cd1a6c9a10af5f30e43b5","modified":1652256820000},{"_id":"themes/hexo-theme-next/scripts/events/lib/utils.js","hash":"ec996d0673f766167c86df0966e9da1ae036e103","modified":1652256820000},{"_id":"themes/hexo-theme-next/scripts/filters/comment/common.js","hash":"19a402a225c31edffc50f202a14e0d582d3db23e","modified":1652256820000},{"_id":"themes/hexo-theme-next/scripts/filters/comment/disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":1652256820000},{"_id":"themes/hexo-theme-next/scripts/filters/comment/disqusjs.js","hash":"135b87d151055eefdbc711d9e704b112b3214a84","modified":1652256820000},{"_id":"themes/hexo-theme-next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1652256820000},{"_id":"themes/hexo-theme-next/scripts/filters/comment/changyan.js","hash":"7fa8701c86485b2fe7324e017101a32417902397","modified":1652256820000},{"_id":"themes/hexo-theme-next/scripts/filters/comment/gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":1652256820000},{"_id":"themes/hexo-theme-next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":1652256820000},{"_id":"themes/hexo-theme-next/scripts/filters/comment/livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":1652256820000},{"_id":"themes/hexo-theme-next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_variables/Muse.styl","hash":"e3be898f5ebcf435a26542653a9297ff2c71aeb0","modified":1652256820000},{"_id":"themes/hexo-theme-next/scripts/events/lib/injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"c65536a128b9bc9dbe2fbb1b235a3cded2891002","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_variables/Mist.styl","hash":"e1fbf169b9b6a194b518240cbd06ec3c48b83d61","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/js/schemes/muse.js","hash":"9a836d2bcc3defe4bd1ee51f5f4eb7006ebdd41b","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_variables/base.styl","hash":"163c7441d777bee87042d475e6ce0fde199add28","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/js/third-party/rating.js","hash":"4e92c2d107ba47b47826829f9668030d5ea9bfb8","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"bab653bcf226311381e8411a0492202f1bf1fce9","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_common/outline/index.styl","hash":"8e34df131830d4fa3725e4590a672ba1cf1903e5","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_common/components/reading-progress.styl","hash":"90a86045a33c1bae49fc2f6fa1e1b53170c7f77b","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"d0a7c99095f490b0d2ed6b1be43d435960798cec","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_common/outline/mobile.styl","hash":"64775c729512b30b144ab5ae9dc4a4dfd4e13f35","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/toggles.styl","hash":"572a41499391677d84b16d8dbd6a996a3d5ce041","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_common/components/index.styl","hash":"fe1868f47681e00a33a96199302be85377282f63","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"4817e77577896ab5c0da434549917ee703a3f4cf","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/pagination.styl","hash":"b5c7782368889fa9fd93807d28ff2daf270e3703","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"fd49b521d67eaccc629f77b4e095cb7310327565","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_posts-expand.styl","hash":"be6cf377ae8f4a01ee76f9b3014e74161d4d5d17","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_layout.styl","hash":"5604ac1e161099a4d3e5657d53507268866dc717","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"fb550935d374e0bdf1097fce187337dc05cad3e1","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"b7f48be3c43bfa393d62142544a5487a67871713","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"6eee86c8f0175d6c09e434053516cd8556f78d44","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_sidebar.styl","hash":"944364893bd7160d954c10ba931af641c91515a4","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"82a29572dd90451f75358a2ee2522b87304a0bb8","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"72dc825c50357402c342d62ab60fc0c478ab6bc1","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_header.styl","hash":"06080fd963c904d96c00eff098a284e337953013","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_header.styl","hash":"b741ab96e73370711c63a6581159f2ea8b5bfa1b","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d9141e6e14a56b5952488101e9a8388c2170e270","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/js/third-party/comments/disqus.js","hash":"e1cc671b0d524864fd445e3ab4ade9ee6d07e565","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/js/third-party/comments/disqusjs.js","hash":"b6c58f098473b526d6a3cd35655caf34b77f7cff","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/js/third-party/tags/mermaid.js","hash":"f27d817b0c2138dd3215b1f46af0753f60a008f3","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"b6e2eb1550a7845cb2adf86081a4ab6c7bde1e68","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/disqusjs.styl","hash":"c2326ee3e8b724d99c24a818ddee32813ea5bf89","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/index.styl","hash":"979486a41a81f2a9fd8b0b87c4f87d6416c68c7d","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/math.styl","hash":"9d995eb4871a6c273d9d51558676a1fdabf69e72","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/search.styl","hash":"e72799ce3f9b79753e365b2f8c8ef6c310668d4a","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/related-posts.styl","hash":"41ed817e1eb64078074e245e771446ee041e5790","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/js/third-party/statistics/firestore.js","hash":"411a72df581f5b21317dc28633c7993207eb9e1c","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","hash":"5a928990856b8e456f0663cf3b6b406733672e39","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/gitter.styl","hash":"35104dc6883a61c31e0e368dac8ac2f697be62fe","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/gitalk.styl","hash":"070737d101e7cd58e997e8c7af09958268c43a21","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/utterances.styl","hash":"56d90ae0559caa55b75f3c300ff2711f9ed65fc4","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-followme.styl","hash":"fc1a7bac6493f24aa50665574f37f3dd954f210c","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"ec37a36e94ba791663607a5022f763915778578f","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-footer.styl","hash":"1d284f3ea03ba9b4feb76b375e539a8e0bccf1c3","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/index.styl","hash":"d0805a763176b3c0003967401644f41dfe3bc9e8","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-body.styl","hash":"d757768a58743601d0d84158ba955eb15d4c3c01","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_common/outline/footer/index.styl","hash":"8b9407e5cfd0571ef8de7df19022b268f962fa2f","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-header.styl","hash":"010c901e4ef49a606f8a350efbf09044e76d2ff3","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"07cff69f2d57e6321595f64c16d8b763dc88df6a","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"52fc98b1435129eb3edb9293ced9e507741f1350","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"b926e368f702f8686aaa2eb98d3d2e533418958c","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"b6677dc2a2368084ab82bb4f145ac79e5966c150","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"9950c3188a28e1c63b5498b7bdcd14b12ace3e28","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/index.styl","hash":"cee43480eba028c37d51cb620c2d81486aa24e01","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"fbdb63c6a8887d19b7137325ba7d6806f728139c","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"021a37cf178440cc341940a299d3bca359996c6b","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/site-state.styl","hash":"26dd0adfcb1db6df29c6090c8d7e9b5a43583fb0","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/bookmark.styl","hash":"e74f4bb47a101b014ee2a1783c87f3b87323f9a0","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/github-banner.styl","hash":"38c64c2d04e46848382bfa246a0e9c508294767b","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"ee94a1a27090ad24e3ed579093088d97ff96d77d","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"3103b81fc76b59e1e2c161e2c484625c770ed66f","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/index.styl","hash":"650ed4ad6df1b6ff04647e7b6d568304e4d3ed2e","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/menu.styl","hash":"392fd53a8dd4e3f33a853ebb24290a622300e0ff","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"83ee4993710fc8daa1c8dbfccd5d5091fd244c30","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/highlight/index.styl","hash":"f2328caa94645836e06fb39a6a9c9a84ed68a8b5","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"d6418fd2bbfba7b73ddf11ec62db9637fdf5d8af","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/site-meta.styl","hash":"759e582d34d08e3386c55d87a835a9523608619f","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/index.styl","hash":"3f76c73a891bbc10679753e702feba9e8a5ffdd2","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"48d35dba575a7c9e8845b16652e76b7d4a4646de","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b6654a1d7cf82577d8263faffee8af3ad4a5c0e8","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/tabs.styl","hash":"7a39bcce7274284e87388743db62afc847fe6897","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"7f8a7345e6537a62cd9e9a94c8f7065b541d9b04","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/note.styl","hash":"d27fbf7799695295dd5860a161a13ac4d90c5ba4","modified":1652256820000},{"_id":"themes/hexo-theme-next/source/images/avatar.png","hash":"b675f0a41c111d806db63d55fd71f843cf51b00a","modified":1652409661410},{"_id":"public/content.json","hash":"003685ffccf9fa44087a88036ae71b42dbb11cd3","modified":1652888701732},{"_id":"public/categories/index.html","hash":"f1d060fc984732e2940a622a022d360ac3d1e428","modified":1652888701732},{"_id":"public/tags/index.html","hash":"edca895462cfd215a1552890a4ed4247fca3122e","modified":1652888701732},{"_id":"public/categories/GO语言/index.html","hash":"0997ce93923066029b4bce80e0c178d743700655","modified":1652888701732},{"_id":"public/categories/LINUX命令/index.html","hash":"4fdc34f0093d1b1552be37b92ca7146909f27f81","modified":1652888701732},{"_id":"public/tags/GO语言/index.html","hash":"113e6f15f3e50d9318345bff203dad31c16ce5b3","modified":1652888701732},{"_id":"public/tags/LINUX命令/index.html","hash":"88ede735727a5c0599ffd2863cd42a149c4b2f93","modified":1652888701732},{"_id":"public/2022/05/18/CURL指南/index.html","hash":"5ef69d18b2b04f434c1c634b115fd649b07ece35","modified":1652888701732},{"_id":"public/2022/05/14/Time包使用示例/index.html","hash":"bc18d004a5cb52dfec61fd9b10fe0fb698d183ae","modified":1652888701732},{"_id":"public/2022/05/14/GO错误异常处理/index.html","hash":"f2ec64be83d3f6c7557a3c47a4d117d3e77ba21b","modified":1652888701732},{"_id":"public/2022/05/12/GO编译时参数/index.html","hash":"63bcaf9bcdea60bf530c7be7d59a3413008e7cd8","modified":1652888701732},{"_id":"public/index.html","hash":"6437c6ec19bb82a6e561dd18314c626babf64028","modified":1652888701732},{"_id":"public/archives/2022/05/index.html","hash":"9f37f048eeb643b7823fd4be0f395d27891791a0","modified":1652888701732},{"_id":"public/archives/2022/index.html","hash":"95d90e14c04673555608d46f37841da2a93a431f","modified":1652888701732},{"_id":"public/archives/index.html","hash":"50b768f9dbd4e6ad16fbe55db4f37474110c52f2","modified":1652888701732},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1652888701732},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1652888701732},{"_id":"public/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1652888701732},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1652888701732},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1652888701732},{"_id":"public/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":1652888701732},{"_id":"public/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1652888701732},{"_id":"public/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1652888701732},{"_id":"public/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1652888701732},{"_id":"public/js/next-boot.js","hash":"48497e2156a10155dc42311633a110c9685692c9","modified":1652888701732},{"_id":"public/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1652888701732},{"_id":"public/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":1652888701732},{"_id":"public/js/schemes/muse.js","hash":"9a836d2bcc3defe4bd1ee51f5f4eb7006ebdd41b","modified":1652888701732},{"_id":"public/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":1652888701732},{"_id":"public/js/utils.js","hash":"e447160d342b1f93df5214b6a733441039ced439","modified":1652888701732},{"_id":"public/js/pjax.js","hash":"919f5281c4a04d11cfd94573ecf57b3dbabd3cc8","modified":1652888701732},{"_id":"public/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1652888701732},{"_id":"public/css/noscript.css","hash":"54d14cd43dc297950a4a8d39ec9644dd5fc3499f","modified":1652888701732},{"_id":"public/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1652888701732},{"_id":"public/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1652888701732},{"_id":"public/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1652888701732},{"_id":"public/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1652888701732},{"_id":"public/js/third-party/rating.js","hash":"4e92c2d107ba47b47826829f9668030d5ea9bfb8","modified":1652888701732},{"_id":"public/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1652888701732},{"_id":"public/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1652888701732},{"_id":"public/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1652888701732},{"_id":"public/js/third-party/comments/disqus.js","hash":"e1cc671b0d524864fd445e3ab4ade9ee6d07e565","modified":1652888701732},{"_id":"public/js/third-party/comments/disqusjs.js","hash":"b6c58f098473b526d6a3cd35655caf34b77f7cff","modified":1652888701732},{"_id":"public/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1652888701732},{"_id":"public/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1652888701732},{"_id":"public/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1652888701732},{"_id":"public/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1652888701732},{"_id":"public/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1652888701732},{"_id":"public/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1652888701732},{"_id":"public/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1652888701732},{"_id":"public/js/third-party/tags/mermaid.js","hash":"f27d817b0c2138dd3215b1f46af0753f60a008f3","modified":1652888701732},{"_id":"public/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1652888701732},{"_id":"public/js/third-party/statistics/firestore.js","hash":"411a72df581f5b21317dc28633c7993207eb9e1c","modified":1652888701732},{"_id":"public/js/third-party/statistics/lean-analytics.js","hash":"5a928990856b8e456f0663cf3b6b406733672e39","modified":1652888701732},{"_id":"public/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1652888701732},{"_id":"public/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1652888701732},{"_id":"public/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1652888701732},{"_id":"public/css/main.css","hash":"fb9dd67a2d1d6caf8713f6a117e2e7501798c08c","modified":1652888701732},{"_id":"public/images/avatar.png","hash":"b675f0a41c111d806db63d55fd71f843cf51b00a","modified":1652888701732}],"Category":[{"name":"GO语言","_id":"cl3br98rc0004pkth272seuxw"},{"name":"LINUX命令","_id":"cl3br98rd0008pkthg3o16cfc"}],"Data":[],"Page":[{"title":"categories","date":"2022-05-13T13:50:00.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2022-05-13 21:50:00\ntype: \"categories\"\n---\n","updated":"2022-05-13T13:50:20.865Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cl3br98r70000pkthfb9p9gz4","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2022-05-13T13:50:50.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2022-05-13 21:50:50\ntype: \"tags\"\n---\n","updated":"2022-05-13T13:52:35.019Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cl3br98ra0002pkthaad5eyn6","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Go编译参数","date":"2022-05-12T10:37:27.000Z","_content":"\n# Go编译时参数\n\nGo编译时，可以通过传入参数来定制编译过程的特征\n\n具体参数可以通过 **go help build** 来进行查看\n\n下面挑选一些常用的参数列举：\n\n## 标准参数\n\n| 参数 | 说明 |\n| --- | --- |\n| -o | 指定构建完成输出路径和文件名 |\n| -i | 已废弃，安装指定的包来完成编译，编译需要的包会自动缓存下来 |\n|  | 其他参数都被归类为build flags |\n\n## build flags\n\nbuild flags在**build,clean,get,install,list,run,test**等命令下都是通用的\n\n下面记录一些常用的参数\n\n|名称                     | 描述                          |\n| ---------------------- | --------------------------------------- |\n| -tags ‘tag list’       | （常用） 构建出带tag的版本.  |\n| -gcflags ‘arg list’    | （常用）编译参数go tool compile --help查看所有可用的参数 .    |\n| -ldflags ‘flag list’   | （常用）链接参数go tool link --help查看可用可用的参数   |\n| -mod                   |  （常用）readonly,vendor,mod 1.14版本以后，如果在mod文件里面有指定vendor，则默认使用vendor，否者设置为readonly|\n| -race                  | （重要）同时检测数据竞争状态，只支持 linux/amd64, freebsd/amd64, darwin/amd64 和 windows/amd64. |\n| -trimpath             | （重要）删除编译包含的固定路径信息，如 -trimpath=$GOPATH，报错信息打印时只会包含文件的相对路径|\n| -modfile             |  指定使用的modfile文件，但go.mod文件依然是需要的，用于确认编译包的根目录，gosum依然是需要的，如传入的xx.mod, 则需要或对应生成为 xx.sum|\n| -n                     | 仅打印输出build需要的命令，不执行build动作（少用）。      |\n| -p n                   | 开多少核cpu来并行编译，默认为本机CPU核数（少用）。      |\n| -v                     | 打印出被编译的包名（少用）.            |\n| -work                  | 打印临时工作目录的名称，并在退出时不删除它（少用）。          |\n| -x                     | 同时打印输出执行的命令名（-n）（少用）.               |\n\n## gcflag\n\n编译参数，我们通过**go tool compile -help**包含哪些\n\n下面列举一些常用的参数\n\n| 名称                     | 描述                          |\n| ---------------------- | --------------------------------------- |\n| -m      | （常用）打印优化信息 |\n| -N      | 禁用优化 (debug时用到） |\n| -l      | 禁止内联优化 (debug时用到） |\n| -c      | 指定编译时的的并发数，默认为1 |\n| -L      | 错误信息中打印文件全名  |\n\ngcflag传入的方式为： -gcflag=\"pattern= args\",其中pattern代表取值分别为 main,all,std,...,用于指定编译参数作用的范围，args则为对应的编译参数\n\n### gcflag 中的 pattern\n\npattern 是选择包的模式，它可以有以下几种定义:\n\n- `main`: 表示 main 函数所在的顶级包路径\n\n- `all`: 表示 GOPATH 中的所有包。如果在 modules 模式下，则表示主模块和它所有的依赖，包括 test 文件的依赖\n\n- `std`: 表示 Go 标准库中的所有包\n\n- `...`: `...` 是一个通配符，可以匹配任意字符串(包括空字符串)。例如:\n\n    - 例如: `net/...` 表示 net 模块和它的所有子模块\n\n    - `./...` 表示当前主模块和所有子模块\n\n    - **注意:**  如果 pattern 中包含了 `/` 和 `...`，那么就不会匹配 `vendor` 目录\n\n        - 例如: `./...` 不会匹配 `./vendor` 目录。可以使用 `./vendor/...` 匹配 vendor 目录和它的子模块\n\n举例如下：\n\n```\ngo build -gcflags=\"main=-N -l\" .\n```\n\n## ldflag\n\n链接参数,我们通过**go tool link --help** 查看可用的参数\n\n下面列举一些常用的参数\n\n|名称                     | 描述                          |\n| ---------------------- | --------------------------------------- |\n| -X     | 注入变量，通常用于版本信息注入 |\n\n举例如下\n\n```\ngo run -ldflags=\"-X main.who handsomeboy\" main.go\n```\n\n\n\n\n\n","source":"_posts/GO编译时参数.md","raw":"---\ntitle: Go编译参数\ndate: 2022-05-12 18:37:27\ncategories:\n- GO语言 \ntags:\n- GO语言\n---\n\n# Go编译时参数\n\nGo编译时，可以通过传入参数来定制编译过程的特征\n\n具体参数可以通过 **go help build** 来进行查看\n\n下面挑选一些常用的参数列举：\n\n## 标准参数\n\n| 参数 | 说明 |\n| --- | --- |\n| -o | 指定构建完成输出路径和文件名 |\n| -i | 已废弃，安装指定的包来完成编译，编译需要的包会自动缓存下来 |\n|  | 其他参数都被归类为build flags |\n\n## build flags\n\nbuild flags在**build,clean,get,install,list,run,test**等命令下都是通用的\n\n下面记录一些常用的参数\n\n|名称                     | 描述                          |\n| ---------------------- | --------------------------------------- |\n| -tags ‘tag list’       | （常用） 构建出带tag的版本.  |\n| -gcflags ‘arg list’    | （常用）编译参数go tool compile --help查看所有可用的参数 .    |\n| -ldflags ‘flag list’   | （常用）链接参数go tool link --help查看可用可用的参数   |\n| -mod                   |  （常用）readonly,vendor,mod 1.14版本以后，如果在mod文件里面有指定vendor，则默认使用vendor，否者设置为readonly|\n| -race                  | （重要）同时检测数据竞争状态，只支持 linux/amd64, freebsd/amd64, darwin/amd64 和 windows/amd64. |\n| -trimpath             | （重要）删除编译包含的固定路径信息，如 -trimpath=$GOPATH，报错信息打印时只会包含文件的相对路径|\n| -modfile             |  指定使用的modfile文件，但go.mod文件依然是需要的，用于确认编译包的根目录，gosum依然是需要的，如传入的xx.mod, 则需要或对应生成为 xx.sum|\n| -n                     | 仅打印输出build需要的命令，不执行build动作（少用）。      |\n| -p n                   | 开多少核cpu来并行编译，默认为本机CPU核数（少用）。      |\n| -v                     | 打印出被编译的包名（少用）.            |\n| -work                  | 打印临时工作目录的名称，并在退出时不删除它（少用）。          |\n| -x                     | 同时打印输出执行的命令名（-n）（少用）.               |\n\n## gcflag\n\n编译参数，我们通过**go tool compile -help**包含哪些\n\n下面列举一些常用的参数\n\n| 名称                     | 描述                          |\n| ---------------------- | --------------------------------------- |\n| -m      | （常用）打印优化信息 |\n| -N      | 禁用优化 (debug时用到） |\n| -l      | 禁止内联优化 (debug时用到） |\n| -c      | 指定编译时的的并发数，默认为1 |\n| -L      | 错误信息中打印文件全名  |\n\ngcflag传入的方式为： -gcflag=\"pattern= args\",其中pattern代表取值分别为 main,all,std,...,用于指定编译参数作用的范围，args则为对应的编译参数\n\n### gcflag 中的 pattern\n\npattern 是选择包的模式，它可以有以下几种定义:\n\n- `main`: 表示 main 函数所在的顶级包路径\n\n- `all`: 表示 GOPATH 中的所有包。如果在 modules 模式下，则表示主模块和它所有的依赖，包括 test 文件的依赖\n\n- `std`: 表示 Go 标准库中的所有包\n\n- `...`: `...` 是一个通配符，可以匹配任意字符串(包括空字符串)。例如:\n\n    - 例如: `net/...` 表示 net 模块和它的所有子模块\n\n    - `./...` 表示当前主模块和所有子模块\n\n    - **注意:**  如果 pattern 中包含了 `/` 和 `...`，那么就不会匹配 `vendor` 目录\n\n        - 例如: `./...` 不会匹配 `./vendor` 目录。可以使用 `./vendor/...` 匹配 vendor 目录和它的子模块\n\n举例如下：\n\n```\ngo build -gcflags=\"main=-N -l\" .\n```\n\n## ldflag\n\n链接参数,我们通过**go tool link --help** 查看可用的参数\n\n下面列举一些常用的参数\n\n|名称                     | 描述                          |\n| ---------------------- | --------------------------------------- |\n| -X     | 注入变量，通常用于版本信息注入 |\n\n举例如下\n\n```\ngo run -ldflags=\"-X main.who handsomeboy\" main.go\n```\n\n\n\n\n\n","slug":"GO编译时参数","published":1,"updated":"2022-05-13T13:54:27.230Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3br98r90001pkth2qf16koo","content":"<h1 id=\"Go编译时参数\"><a href=\"#Go编译时参数\" class=\"headerlink\" title=\"Go编译时参数\"></a>Go编译时参数</h1><p>Go编译时，可以通过传入参数来定制编译过程的特征</p>\n<p>具体参数可以通过 <strong>go help build</strong> 来进行查看</p>\n<p>下面挑选一些常用的参数列举：</p>\n<h2 id=\"标准参数\"><a href=\"#标准参数\" class=\"headerlink\" title=\"标准参数\"></a>标准参数</h2><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-o</td>\n<td>指定构建完成输出路径和文件名</td>\n</tr>\n<tr>\n<td>-i</td>\n<td>已废弃，安装指定的包来完成编译，编译需要的包会自动缓存下来</td>\n</tr>\n<tr>\n<td></td>\n<td>其他参数都被归类为build flags</td>\n</tr>\n</tbody></table>\n<h2 id=\"build-flags\"><a href=\"#build-flags\" class=\"headerlink\" title=\"build flags\"></a>build flags</h2><p>build flags在<strong>build,clean,get,install,list,run,test</strong>等命令下都是通用的</p>\n<p>下面记录一些常用的参数</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-tags ‘tag list’</td>\n<td>（常用） 构建出带tag的版本.</td>\n</tr>\n<tr>\n<td>-gcflags ‘arg list’</td>\n<td>（常用）编译参数go tool compile –help查看所有可用的参数 .</td>\n</tr>\n<tr>\n<td>-ldflags ‘flag list’</td>\n<td>（常用）链接参数go tool link –help查看可用可用的参数</td>\n</tr>\n<tr>\n<td>-mod</td>\n<td>（常用）readonly,vendor,mod 1.14版本以后，如果在mod文件里面有指定vendor，则默认使用vendor，否者设置为readonly</td>\n</tr>\n<tr>\n<td>-race</td>\n<td>（重要）同时检测数据竞争状态，只支持 linux/amd64, freebsd/amd64, darwin/amd64 和 windows/amd64.</td>\n</tr>\n<tr>\n<td>-trimpath</td>\n<td>（重要）删除编译包含的固定路径信息，如 -trimpath=$GOPATH，报错信息打印时只会包含文件的相对路径</td>\n</tr>\n<tr>\n<td>-modfile</td>\n<td>指定使用的modfile文件，但go.mod文件依然是需要的，用于确认编译包的根目录，gosum依然是需要的，如传入的xx.mod, 则需要或对应生成为 xx.sum</td>\n</tr>\n<tr>\n<td>-n</td>\n<td>仅打印输出build需要的命令，不执行build动作（少用）。</td>\n</tr>\n<tr>\n<td>-p n</td>\n<td>开多少核cpu来并行编译，默认为本机CPU核数（少用）。</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>打印出被编译的包名（少用）.</td>\n</tr>\n<tr>\n<td>-work</td>\n<td>打印临时工作目录的名称，并在退出时不删除它（少用）。</td>\n</tr>\n<tr>\n<td>-x</td>\n<td>同时打印输出执行的命令名（-n）（少用）.</td>\n</tr>\n</tbody></table>\n<h2 id=\"gcflag\"><a href=\"#gcflag\" class=\"headerlink\" title=\"gcflag\"></a>gcflag</h2><p>编译参数，我们通过<strong>go tool compile -help</strong>包含哪些</p>\n<p>下面列举一些常用的参数</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-m</td>\n<td>（常用）打印优化信息</td>\n</tr>\n<tr>\n<td>-N</td>\n<td>禁用优化 (debug时用到）</td>\n</tr>\n<tr>\n<td>-l</td>\n<td>禁止内联优化 (debug时用到）</td>\n</tr>\n<tr>\n<td>-c</td>\n<td>指定编译时的的并发数，默认为1</td>\n</tr>\n<tr>\n<td>-L</td>\n<td>错误信息中打印文件全名</td>\n</tr>\n</tbody></table>\n<p>gcflag传入的方式为： -gcflag=”pattern= args”,其中pattern代表取值分别为 main,all,std,…,用于指定编译参数作用的范围，args则为对应的编译参数</p>\n<h3 id=\"gcflag-中的-pattern\"><a href=\"#gcflag-中的-pattern\" class=\"headerlink\" title=\"gcflag 中的 pattern\"></a>gcflag 中的 pattern</h3><p>pattern 是选择包的模式，它可以有以下几种定义:</p>\n<ul>\n<li><p><code>main</code>: 表示 main 函数所在的顶级包路径</p>\n</li>\n<li><p><code>all</code>: 表示 GOPATH 中的所有包。如果在 modules 模式下，则表示主模块和它所有的依赖，包括 test 文件的依赖</p>\n</li>\n<li><p><code>std</code>: 表示 Go 标准库中的所有包</p>\n</li>\n<li><p><code>...</code>: <code>...</code> 是一个通配符，可以匹配任意字符串(包括空字符串)。例如:</p>\n<ul>\n<li><p>例如: <code>net/...</code> 表示 net 模块和它的所有子模块</p>\n</li>\n<li><p><code>./...</code> 表示当前主模块和所有子模块</p>\n</li>\n<li><p><strong>注意:</strong>  如果 pattern 中包含了 <code>/</code> 和 <code>...</code>，那么就不会匹配 <code>vendor</code> 目录</p>\n<ul>\n<li>例如: <code>./...</code> 不会匹配 <code>./vendor</code> 目录。可以使用 <code>./vendor/...</code> 匹配 vendor 目录和它的子模块</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>举例如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go build -gcflags=&quot;main=-N -l&quot; .</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ldflag\"><a href=\"#ldflag\" class=\"headerlink\" title=\"ldflag\"></a>ldflag</h2><p>链接参数,我们通过<strong>go tool link –help</strong> 查看可用的参数</p>\n<p>下面列举一些常用的参数</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-X</td>\n<td>注入变量，通常用于版本信息注入</td>\n</tr>\n</tbody></table>\n<p>举例如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go run -ldflags=&quot;-X main.who handsomeboy&quot; main.go</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Go编译时参数\"><a href=\"#Go编译时参数\" class=\"headerlink\" title=\"Go编译时参数\"></a>Go编译时参数</h1><p>Go编译时，可以通过传入参数来定制编译过程的特征</p>\n<p>具体参数可以通过 <strong>go help build</strong> 来进行查看</p>\n<p>下面挑选一些常用的参数列举：</p>\n<h2 id=\"标准参数\"><a href=\"#标准参数\" class=\"headerlink\" title=\"标准参数\"></a>标准参数</h2><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-o</td>\n<td>指定构建完成输出路径和文件名</td>\n</tr>\n<tr>\n<td>-i</td>\n<td>已废弃，安装指定的包来完成编译，编译需要的包会自动缓存下来</td>\n</tr>\n<tr>\n<td></td>\n<td>其他参数都被归类为build flags</td>\n</tr>\n</tbody></table>\n<h2 id=\"build-flags\"><a href=\"#build-flags\" class=\"headerlink\" title=\"build flags\"></a>build flags</h2><p>build flags在<strong>build,clean,get,install,list,run,test</strong>等命令下都是通用的</p>\n<p>下面记录一些常用的参数</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-tags ‘tag list’</td>\n<td>（常用） 构建出带tag的版本.</td>\n</tr>\n<tr>\n<td>-gcflags ‘arg list’</td>\n<td>（常用）编译参数go tool compile –help查看所有可用的参数 .</td>\n</tr>\n<tr>\n<td>-ldflags ‘flag list’</td>\n<td>（常用）链接参数go tool link –help查看可用可用的参数</td>\n</tr>\n<tr>\n<td>-mod</td>\n<td>（常用）readonly,vendor,mod 1.14版本以后，如果在mod文件里面有指定vendor，则默认使用vendor，否者设置为readonly</td>\n</tr>\n<tr>\n<td>-race</td>\n<td>（重要）同时检测数据竞争状态，只支持 linux/amd64, freebsd/amd64, darwin/amd64 和 windows/amd64.</td>\n</tr>\n<tr>\n<td>-trimpath</td>\n<td>（重要）删除编译包含的固定路径信息，如 -trimpath=$GOPATH，报错信息打印时只会包含文件的相对路径</td>\n</tr>\n<tr>\n<td>-modfile</td>\n<td>指定使用的modfile文件，但go.mod文件依然是需要的，用于确认编译包的根目录，gosum依然是需要的，如传入的xx.mod, 则需要或对应生成为 xx.sum</td>\n</tr>\n<tr>\n<td>-n</td>\n<td>仅打印输出build需要的命令，不执行build动作（少用）。</td>\n</tr>\n<tr>\n<td>-p n</td>\n<td>开多少核cpu来并行编译，默认为本机CPU核数（少用）。</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>打印出被编译的包名（少用）.</td>\n</tr>\n<tr>\n<td>-work</td>\n<td>打印临时工作目录的名称，并在退出时不删除它（少用）。</td>\n</tr>\n<tr>\n<td>-x</td>\n<td>同时打印输出执行的命令名（-n）（少用）.</td>\n</tr>\n</tbody></table>\n<h2 id=\"gcflag\"><a href=\"#gcflag\" class=\"headerlink\" title=\"gcflag\"></a>gcflag</h2><p>编译参数，我们通过<strong>go tool compile -help</strong>包含哪些</p>\n<p>下面列举一些常用的参数</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-m</td>\n<td>（常用）打印优化信息</td>\n</tr>\n<tr>\n<td>-N</td>\n<td>禁用优化 (debug时用到）</td>\n</tr>\n<tr>\n<td>-l</td>\n<td>禁止内联优化 (debug时用到）</td>\n</tr>\n<tr>\n<td>-c</td>\n<td>指定编译时的的并发数，默认为1</td>\n</tr>\n<tr>\n<td>-L</td>\n<td>错误信息中打印文件全名</td>\n</tr>\n</tbody></table>\n<p>gcflag传入的方式为： -gcflag=”pattern= args”,其中pattern代表取值分别为 main,all,std,…,用于指定编译参数作用的范围，args则为对应的编译参数</p>\n<h3 id=\"gcflag-中的-pattern\"><a href=\"#gcflag-中的-pattern\" class=\"headerlink\" title=\"gcflag 中的 pattern\"></a>gcflag 中的 pattern</h3><p>pattern 是选择包的模式，它可以有以下几种定义:</p>\n<ul>\n<li><p><code>main</code>: 表示 main 函数所在的顶级包路径</p>\n</li>\n<li><p><code>all</code>: 表示 GOPATH 中的所有包。如果在 modules 模式下，则表示主模块和它所有的依赖，包括 test 文件的依赖</p>\n</li>\n<li><p><code>std</code>: 表示 Go 标准库中的所有包</p>\n</li>\n<li><p><code>...</code>: <code>...</code> 是一个通配符，可以匹配任意字符串(包括空字符串)。例如:</p>\n<ul>\n<li><p>例如: <code>net/...</code> 表示 net 模块和它的所有子模块</p>\n</li>\n<li><p><code>./...</code> 表示当前主模块和所有子模块</p>\n</li>\n<li><p><strong>注意:</strong>  如果 pattern 中包含了 <code>/</code> 和 <code>...</code>，那么就不会匹配 <code>vendor</code> 目录</p>\n<ul>\n<li>例如: <code>./...</code> 不会匹配 <code>./vendor</code> 目录。可以使用 <code>./vendor/...</code> 匹配 vendor 目录和它的子模块</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>举例如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go build -gcflags=&quot;main=-N -l&quot; .</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ldflag\"><a href=\"#ldflag\" class=\"headerlink\" title=\"ldflag\"></a>ldflag</h2><p>链接参数,我们通过<strong>go tool link –help</strong> 查看可用的参数</p>\n<p>下面列举一些常用的参数</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-X</td>\n<td>注入变量，通常用于版本信息注入</td>\n</tr>\n</tbody></table>\n<p>举例如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go run -ldflags=&quot;-X main.who handsomeboy&quot; main.go</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n"},{"title":"CURL指南","date":"2022-05-18T13:35:11.000Z","_content":"\n## 简介\n\n大多数开发者都使用过CURL，但对它庞大的功能知之甚少，它支持的参数多达数五十多个,而且还在不断的增加\n\n它的功能非常强大，熟练的话，完全可以满足我们日常大部分需求\n\n## 常用参数\n\n以下内容主要介绍它的常用参数\n\n主要内容来自\n\n[《curl cookbook》](https://catonmat.net/cookbooks/curl) ，\n[阮一峰老师的CURL用法指南](https://www.ruanyifeng.com/blog/2019/09/curl-reference.html)\n命令手册介绍，使用命令**curl --manual**就可以查看它的全部介绍\n\n#### GET请求\n\nGET请求相关的参数如下\n\n| 参数             | 描述                                | 例子                                                                                                                          |\n| ------------------ | ------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------- |\n| -G               | 将-d参数的内容改为GET参数           | curl -G -d 'q=kitties' -d 'count=20' https://google.com/search<br/> 实际请求URL为https://google.com/search?q=kitties&count=20 |\n| --data-urlencode | 主要用于处理GET参数中包含空格的情况 | --data-urlencode 'comment=hello world'                                                                                        |\n\n#### POST请求\n\n| 参数             | 描述                                            | 例子                                                                                                                                                                                                                   |\n| ------------------ | ------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| -d               | post 数据                                       | curl -d'login=emma＆password=123'-X POST https://google.com/login<br/>或者 curl -d 'login=emma' -d 'password=123' -X POST  https://google.com/login                                                                    |\n| -d @file         | 读取文件内容作为post内容                        | curl -d '@data.txt' https://google.com/login<br/> 这样就直接读取data.txt内容向服务器发送                                                                                                                               |\n| --data-urlencode | 会对post内容进行urlencode                       | curl --data-urlencode 'comment=hello world' https://google.com/login                                                                                                                                                   |\n| -F               | 向服务器上传二进制文件,并且设置上传类型和文件名 | curl -F 'file=@photo.png;type=image/png;filename=me.png' https://google.com/profile<br/> 上面命令指定 MIME 类型为image/png，否则 curl 会把 MIME 类型设为application/octet-stream <br/> filename 指定服务器收到的文件名 |\n\n#### 设置header相关参数\n\n| 参数    | 描述                             | 例子                                                                                                                                             |\n| --------- | ---------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------- |\n| -A      | 设置user-agent                   | curl -A 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 SaHari/537.36' https://google.com |\n| -H      | 指定对应的header，可以多个-H连写 | curl -H 'Accept-Language: en-US' -H 'Secret-Message: xyzzy' https://google.com                                                                   |\n| -b      | 设置cookie，可以多个-b连写       | curl -b 'foo=bar' https://google.com 向服务器发送一个名为foo，值为bar的cookie                                                                    |\n| -b file | 设置cookie文件                   | curl -b cookies.txt https://www.google.com                                                                                                       |\n| -e      | 设置referer                      | curl -e 'https://google.com?q=example' https://www.example.com                                                                                   |\n| -u      | 账号密码授权                     | curl -u 'bob:12345' https://google.com/login                                                                                                     |\n\n#### 引导设置\n\n| 参数 | 描述       | 例子                                                              |\n| ------ | ------------ | ------------------------------------------------------------------- |\n| -X   | 指定请求方式，GET，POST，HEAD，PUT等 | curl -X POST https://www.example.com                                       |\n| -L   | 允许重定向，默认CURL是不跟随重定向的 | curl -L http://catonmat.net                                       |\n| -x   | 设置代理   | curl -x socks5://james:cats@myproxy.com:8080 https://catonmat.net |\n| -k   | 跳过HTTPS校验，不检查证书是否正确   | curl -k https://www.example.com |\n| --resolve HOST:PORT:ADDRESS   | 强制解析HOST到对应的IP:PORT，非常好用，可以配合通配符使用   | curl https://datapixxxx.cn/ --resolve *:443:1.1.1.1 |\n| -K 或 --config  FILE  | 指定配置文件,里面的内容按 每个参数一行进行设置   | curl -K config.txt https://www.example.com |\n\n#### 获取内容\n\n| 参数 | 描述       | 例子                                                              |\n| ------ | ------------ | ------------------------------------------------------------------- |\n| -c  file | 将服务器发送的cookie保存到对应的文件 | curl -c cookies.txt https://www.google.com                  |\n| -o  file  | 将服务器响应保存到文件   |  curl -o example.html https://www.example.com |\n| -v   | 打印整个请求过程，用于调试   |  curl -v https://www.example.com|\n| -i   | 打印服务器响应的header   | curl -i https://www.example.com |\n| -# 或者 --progress-bar   | 显示进度条   | curl -# -i https://www.example.com |\n\n#### 调试打印\n\n如果本地无法连接服务器，或响应很慢，我们肯定想知道是中间哪个环节出了问题\n\n这时候就需要使用-w参数，打印一些请求过程的参数，方便我们排查问题\n\n其中比较常用的参数如下\n\n| 参数 | 描述       | \n| ------ | ------------ | \n| time_connect | 建立TCP连接花费的时间 |     \n| time_namelookup | DNS查询花费的时间 | \n| time_total | 全部完成花费时间 | \n| remote_ip | 服务器IP | \n| remote_port | 服务器端口 | \n| time_redirect | 重定向花费时间，包括重定向的DNS查询到完成响应的时间 | \n\n下面是一个简单的例子\n\n```\ncurl  https://www.example.com -w 'TCP连接时间:%{time_connect}\\nDNS时间:%{time_namelookup}\\n全部时间:%{time_total}\\n服务器IP:%{remote_ip}\\n'\n```\n\n响应如下：\n\n```\nTCP连接时间:1.154614\nDNS时间:0.000895\n全部时间:2.381030\n服务器IP:93.184.216.34\n```\n","source":"_posts/CURL指南.md","raw":"---\ntitle: CURL指南 \ncategories:\n- LINUX命令 \ntags:\n- LINUX命令 \ndate: 2022-05-18 21:35:11\n---\n\n## 简介\n\n大多数开发者都使用过CURL，但对它庞大的功能知之甚少，它支持的参数多达数五十多个,而且还在不断的增加\n\n它的功能非常强大，熟练的话，完全可以满足我们日常大部分需求\n\n## 常用参数\n\n以下内容主要介绍它的常用参数\n\n主要内容来自\n\n[《curl cookbook》](https://catonmat.net/cookbooks/curl) ，\n[阮一峰老师的CURL用法指南](https://www.ruanyifeng.com/blog/2019/09/curl-reference.html)\n命令手册介绍，使用命令**curl --manual**就可以查看它的全部介绍\n\n#### GET请求\n\nGET请求相关的参数如下\n\n| 参数             | 描述                                | 例子                                                                                                                          |\n| ------------------ | ------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------- |\n| -G               | 将-d参数的内容改为GET参数           | curl -G -d 'q=kitties' -d 'count=20' https://google.com/search<br/> 实际请求URL为https://google.com/search?q=kitties&count=20 |\n| --data-urlencode | 主要用于处理GET参数中包含空格的情况 | --data-urlencode 'comment=hello world'                                                                                        |\n\n#### POST请求\n\n| 参数             | 描述                                            | 例子                                                                                                                                                                                                                   |\n| ------------------ | ------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| -d               | post 数据                                       | curl -d'login=emma＆password=123'-X POST https://google.com/login<br/>或者 curl -d 'login=emma' -d 'password=123' -X POST  https://google.com/login                                                                    |\n| -d @file         | 读取文件内容作为post内容                        | curl -d '@data.txt' https://google.com/login<br/> 这样就直接读取data.txt内容向服务器发送                                                                                                                               |\n| --data-urlencode | 会对post内容进行urlencode                       | curl --data-urlencode 'comment=hello world' https://google.com/login                                                                                                                                                   |\n| -F               | 向服务器上传二进制文件,并且设置上传类型和文件名 | curl -F 'file=@photo.png;type=image/png;filename=me.png' https://google.com/profile<br/> 上面命令指定 MIME 类型为image/png，否则 curl 会把 MIME 类型设为application/octet-stream <br/> filename 指定服务器收到的文件名 |\n\n#### 设置header相关参数\n\n| 参数    | 描述                             | 例子                                                                                                                                             |\n| --------- | ---------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------- |\n| -A      | 设置user-agent                   | curl -A 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 SaHari/537.36' https://google.com |\n| -H      | 指定对应的header，可以多个-H连写 | curl -H 'Accept-Language: en-US' -H 'Secret-Message: xyzzy' https://google.com                                                                   |\n| -b      | 设置cookie，可以多个-b连写       | curl -b 'foo=bar' https://google.com 向服务器发送一个名为foo，值为bar的cookie                                                                    |\n| -b file | 设置cookie文件                   | curl -b cookies.txt https://www.google.com                                                                                                       |\n| -e      | 设置referer                      | curl -e 'https://google.com?q=example' https://www.example.com                                                                                   |\n| -u      | 账号密码授权                     | curl -u 'bob:12345' https://google.com/login                                                                                                     |\n\n#### 引导设置\n\n| 参数 | 描述       | 例子                                                              |\n| ------ | ------------ | ------------------------------------------------------------------- |\n| -X   | 指定请求方式，GET，POST，HEAD，PUT等 | curl -X POST https://www.example.com                                       |\n| -L   | 允许重定向，默认CURL是不跟随重定向的 | curl -L http://catonmat.net                                       |\n| -x   | 设置代理   | curl -x socks5://james:cats@myproxy.com:8080 https://catonmat.net |\n| -k   | 跳过HTTPS校验，不检查证书是否正确   | curl -k https://www.example.com |\n| --resolve HOST:PORT:ADDRESS   | 强制解析HOST到对应的IP:PORT，非常好用，可以配合通配符使用   | curl https://datapixxxx.cn/ --resolve *:443:1.1.1.1 |\n| -K 或 --config  FILE  | 指定配置文件,里面的内容按 每个参数一行进行设置   | curl -K config.txt https://www.example.com |\n\n#### 获取内容\n\n| 参数 | 描述       | 例子                                                              |\n| ------ | ------------ | ------------------------------------------------------------------- |\n| -c  file | 将服务器发送的cookie保存到对应的文件 | curl -c cookies.txt https://www.google.com                  |\n| -o  file  | 将服务器响应保存到文件   |  curl -o example.html https://www.example.com |\n| -v   | 打印整个请求过程，用于调试   |  curl -v https://www.example.com|\n| -i   | 打印服务器响应的header   | curl -i https://www.example.com |\n| -# 或者 --progress-bar   | 显示进度条   | curl -# -i https://www.example.com |\n\n#### 调试打印\n\n如果本地无法连接服务器，或响应很慢，我们肯定想知道是中间哪个环节出了问题\n\n这时候就需要使用-w参数，打印一些请求过程的参数，方便我们排查问题\n\n其中比较常用的参数如下\n\n| 参数 | 描述       | \n| ------ | ------------ | \n| time_connect | 建立TCP连接花费的时间 |     \n| time_namelookup | DNS查询花费的时间 | \n| time_total | 全部完成花费时间 | \n| remote_ip | 服务器IP | \n| remote_port | 服务器端口 | \n| time_redirect | 重定向花费时间，包括重定向的DNS查询到完成响应的时间 | \n\n下面是一个简单的例子\n\n```\ncurl  https://www.example.com -w 'TCP连接时间:%{time_connect}\\nDNS时间:%{time_namelookup}\\n全部时间:%{time_total}\\n服务器IP:%{remote_ip}\\n'\n```\n\n响应如下：\n\n```\nTCP连接时间:1.154614\nDNS时间:0.000895\n全部时间:2.381030\n服务器IP:93.184.216.34\n```\n","slug":"CURL指南","published":1,"updated":"2022-05-18T15:42:11.414Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3br98rb0003pkth20sj3zd1","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>大多数开发者都使用过CURL，但对它庞大的功能知之甚少，它支持的参数多达数五十多个,而且还在不断的增加</p>\n<p>它的功能非常强大，熟练的话，完全可以满足我们日常大部分需求</p>\n<h2 id=\"常用参数\"><a href=\"#常用参数\" class=\"headerlink\" title=\"常用参数\"></a>常用参数</h2><p>以下内容主要介绍它的常用参数</p>\n<p>主要内容来自</p>\n<p><a href=\"https://catonmat.net/cookbooks/curl\">《curl cookbook》</a> ，<br><a href=\"https://www.ruanyifeng.com/blog/2019/09/curl-reference.html\">阮一峰老师的CURL用法指南</a><br>命令手册介绍，使用命令<strong>curl –manual</strong>就可以查看它的全部介绍</p>\n<h4 id=\"GET请求\"><a href=\"#GET请求\" class=\"headerlink\" title=\"GET请求\"></a>GET请求</h4><p>GET请求相关的参数如下</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n<th>例子</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-G</td>\n<td>将-d参数的内容改为GET参数</td>\n<td>curl -G -d ‘q=kitties’ -d ‘count=20’ <a href=\"https://google.com/search\">https://google.com/search</a><br/> 实际请求URL为<a href=\"https://google.com/search?q=kitties&amp;count=20\">https://google.com/search?q=kitties&amp;count=20</a></td>\n</tr>\n<tr>\n<td>–data-urlencode</td>\n<td>主要用于处理GET参数中包含空格的情况</td>\n<td>–data-urlencode ‘comment=hello world’</td>\n</tr>\n</tbody></table>\n<h4 id=\"POST请求\"><a href=\"#POST请求\" class=\"headerlink\" title=\"POST请求\"></a>POST请求</h4><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n<th>例子</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-d</td>\n<td>post 数据</td>\n<td>curl -d’login=emma＆password=123’-X POST <a href=\"https://google.com/login\">https://google.com/login</a><br/>或者 curl -d ‘login=emma’ -d ‘password=123’ -X POST  <a href=\"https://google.com/login\">https://google.com/login</a></td>\n</tr>\n<tr>\n<td>-d @file</td>\n<td>读取文件内容作为post内容</td>\n<td>curl -d ‘@data.txt’ <a href=\"https://google.com/login\">https://google.com/login</a><br/> 这样就直接读取data.txt内容向服务器发送</td>\n</tr>\n<tr>\n<td>–data-urlencode</td>\n<td>会对post内容进行urlencode</td>\n<td>curl –data-urlencode ‘comment=hello world’ <a href=\"https://google.com/login\">https://google.com/login</a></td>\n</tr>\n<tr>\n<td>-F</td>\n<td>向服务器上传二进制文件,并且设置上传类型和文件名</td>\n<td>curl -F ‘file=@photo.png;type=image/png;filename=me.png’ <a href=\"https://google.com/profile\">https://google.com/profile</a><br/> 上面命令指定 MIME 类型为image/png，否则 curl 会把 MIME 类型设为application/octet-stream <br/> filename 指定服务器收到的文件名</td>\n</tr>\n</tbody></table>\n<h4 id=\"设置header相关参数\"><a href=\"#设置header相关参数\" class=\"headerlink\" title=\"设置header相关参数\"></a>设置header相关参数</h4><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n<th>例子</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-A</td>\n<td>设置user-agent</td>\n<td>curl -A ‘Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 SaHari/537.36’ <a href=\"https://google.com/\">https://google.com</a></td>\n</tr>\n<tr>\n<td>-H</td>\n<td>指定对应的header，可以多个-H连写</td>\n<td>curl -H ‘Accept-Language: en-US’ -H ‘Secret-Message: xyzzy’ <a href=\"https://google.com/\">https://google.com</a></td>\n</tr>\n<tr>\n<td>-b</td>\n<td>设置cookie，可以多个-b连写</td>\n<td>curl -b ‘foo=bar’ <a href=\"https://google.com/\">https://google.com</a> 向服务器发送一个名为foo，值为bar的cookie</td>\n</tr>\n<tr>\n<td>-b file</td>\n<td>设置cookie文件</td>\n<td>curl -b cookies.txt <a href=\"https://www.google.com/\">https://www.google.com</a></td>\n</tr>\n<tr>\n<td>-e</td>\n<td>设置referer</td>\n<td>curl -e ‘<a href=\"https://google.com/?q=example&#39;\">https://google.com?q=example&#39;</a> <a href=\"https://www.example.com/\">https://www.example.com</a></td>\n</tr>\n<tr>\n<td>-u</td>\n<td>账号密码授权</td>\n<td>curl -u ‘bob:12345’ <a href=\"https://google.com/login\">https://google.com/login</a></td>\n</tr>\n</tbody></table>\n<h4 id=\"引导设置\"><a href=\"#引导设置\" class=\"headerlink\" title=\"引导设置\"></a>引导设置</h4><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n<th>例子</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-X</td>\n<td>指定请求方式，GET，POST，HEAD，PUT等</td>\n<td>curl -X POST <a href=\"https://www.example.com/\">https://www.example.com</a></td>\n</tr>\n<tr>\n<td>-L</td>\n<td>允许重定向，默认CURL是不跟随重定向的</td>\n<td>curl -L <a href=\"http://catonmat.net/\">http://catonmat.net</a></td>\n</tr>\n<tr>\n<td>-x</td>\n<td>设置代理</td>\n<td>curl -x socks5://james:<a href=\"mailto:&#x63;&#97;&#x74;&#115;&#64;&#109;&#121;&#x70;&#x72;&#111;&#120;&#x79;&#46;&#99;&#x6f;&#109;\">&#x63;&#97;&#x74;&#115;&#64;&#109;&#121;&#x70;&#x72;&#111;&#120;&#x79;&#46;&#99;&#x6f;&#109;</a>:8080 <a href=\"https://catonmat.net/\">https://catonmat.net</a></td>\n</tr>\n<tr>\n<td>-k</td>\n<td>跳过HTTPS校验，不检查证书是否正确</td>\n<td>curl -k <a href=\"https://www.example.com/\">https://www.example.com</a></td>\n</tr>\n<tr>\n<td>–resolve HOST:PORT:ADDRESS</td>\n<td>强制解析HOST到对应的IP:PORT，非常好用，可以配合通配符使用</td>\n<td>curl <a href=\"https://datapixxxx.cn/\">https://datapixxxx.cn/</a> –resolve *:443:1.1.1.1</td>\n</tr>\n<tr>\n<td>-K 或 –config  FILE</td>\n<td>指定配置文件,里面的内容按 每个参数一行进行设置</td>\n<td>curl -K config.txt <a href=\"https://www.example.com/\">https://www.example.com</a></td>\n</tr>\n</tbody></table>\n<h4 id=\"获取内容\"><a href=\"#获取内容\" class=\"headerlink\" title=\"获取内容\"></a>获取内容</h4><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n<th>例子</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-c  file</td>\n<td>将服务器发送的cookie保存到对应的文件</td>\n<td>curl -c cookies.txt <a href=\"https://www.google.com/\">https://www.google.com</a></td>\n</tr>\n<tr>\n<td>-o  file</td>\n<td>将服务器响应保存到文件</td>\n<td>curl -o example.html <a href=\"https://www.example.com/\">https://www.example.com</a></td>\n</tr>\n<tr>\n<td>-v</td>\n<td>打印整个请求过程，用于调试</td>\n<td>curl -v <a href=\"https://www.example.com/\">https://www.example.com</a></td>\n</tr>\n<tr>\n<td>-i</td>\n<td>打印服务器响应的header</td>\n<td>curl -i <a href=\"https://www.example.com/\">https://www.example.com</a></td>\n</tr>\n<tr>\n<td>-# 或者 –progress-bar</td>\n<td>显示进度条</td>\n<td>curl -# -i <a href=\"https://www.example.com/\">https://www.example.com</a></td>\n</tr>\n</tbody></table>\n<h4 id=\"调试打印\"><a href=\"#调试打印\" class=\"headerlink\" title=\"调试打印\"></a>调试打印</h4><p>如果本地无法连接服务器，或响应很慢，我们肯定想知道是中间哪个环节出了问题</p>\n<p>这时候就需要使用-w参数，打印一些请求过程的参数，方便我们排查问题</p>\n<p>其中比较常用的参数如下</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>time_connect</td>\n<td>建立TCP连接花费的时间</td>\n</tr>\n<tr>\n<td>time_namelookup</td>\n<td>DNS查询花费的时间</td>\n</tr>\n<tr>\n<td>time_total</td>\n<td>全部完成花费时间</td>\n</tr>\n<tr>\n<td>remote_ip</td>\n<td>服务器IP</td>\n</tr>\n<tr>\n<td>remote_port</td>\n<td>服务器端口</td>\n</tr>\n<tr>\n<td>time_redirect</td>\n<td>重定向花费时间，包括重定向的DNS查询到完成响应的时间</td>\n</tr>\n</tbody></table>\n<p>下面是一个简单的例子</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl  https://www.example.com -w &#x27;TCP连接时间:%&#123;time_connect&#125;\\nDNS时间:%&#123;time_namelookup&#125;\\n全部时间:%&#123;time_total&#125;\\n服务器IP:%&#123;remote_ip&#125;\\n&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>响应如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TCP连接时间:1.154614</span><br><span class=\"line\">DNS时间:0.000895</span><br><span class=\"line\">全部时间:2.381030</span><br><span class=\"line\">服务器IP:93.184.216.34</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>大多数开发者都使用过CURL，但对它庞大的功能知之甚少，它支持的参数多达数五十多个,而且还在不断的增加</p>\n<p>它的功能非常强大，熟练的话，完全可以满足我们日常大部分需求</p>\n<h2 id=\"常用参数\"><a href=\"#常用参数\" class=\"headerlink\" title=\"常用参数\"></a>常用参数</h2><p>以下内容主要介绍它的常用参数</p>\n<p>主要内容来自</p>\n<p><a href=\"https://catonmat.net/cookbooks/curl\">《curl cookbook》</a> ，<br><a href=\"https://www.ruanyifeng.com/blog/2019/09/curl-reference.html\">阮一峰老师的CURL用法指南</a><br>命令手册介绍，使用命令<strong>curl –manual</strong>就可以查看它的全部介绍</p>\n<h4 id=\"GET请求\"><a href=\"#GET请求\" class=\"headerlink\" title=\"GET请求\"></a>GET请求</h4><p>GET请求相关的参数如下</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n<th>例子</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-G</td>\n<td>将-d参数的内容改为GET参数</td>\n<td>curl -G -d ‘q=kitties’ -d ‘count=20’ <a href=\"https://google.com/search\">https://google.com/search</a><br/> 实际请求URL为<a href=\"https://google.com/search?q=kitties&amp;count=20\">https://google.com/search?q=kitties&amp;count=20</a></td>\n</tr>\n<tr>\n<td>–data-urlencode</td>\n<td>主要用于处理GET参数中包含空格的情况</td>\n<td>–data-urlencode ‘comment=hello world’</td>\n</tr>\n</tbody></table>\n<h4 id=\"POST请求\"><a href=\"#POST请求\" class=\"headerlink\" title=\"POST请求\"></a>POST请求</h4><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n<th>例子</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-d</td>\n<td>post 数据</td>\n<td>curl -d’login=emma＆password=123’-X POST <a href=\"https://google.com/login\">https://google.com/login</a><br/>或者 curl -d ‘login=emma’ -d ‘password=123’ -X POST  <a href=\"https://google.com/login\">https://google.com/login</a></td>\n</tr>\n<tr>\n<td>-d @file</td>\n<td>读取文件内容作为post内容</td>\n<td>curl -d ‘@data.txt’ <a href=\"https://google.com/login\">https://google.com/login</a><br/> 这样就直接读取data.txt内容向服务器发送</td>\n</tr>\n<tr>\n<td>–data-urlencode</td>\n<td>会对post内容进行urlencode</td>\n<td>curl –data-urlencode ‘comment=hello world’ <a href=\"https://google.com/login\">https://google.com/login</a></td>\n</tr>\n<tr>\n<td>-F</td>\n<td>向服务器上传二进制文件,并且设置上传类型和文件名</td>\n<td>curl -F ‘file=@photo.png;type=image/png;filename=me.png’ <a href=\"https://google.com/profile\">https://google.com/profile</a><br/> 上面命令指定 MIME 类型为image/png，否则 curl 会把 MIME 类型设为application/octet-stream <br/> filename 指定服务器收到的文件名</td>\n</tr>\n</tbody></table>\n<h4 id=\"设置header相关参数\"><a href=\"#设置header相关参数\" class=\"headerlink\" title=\"设置header相关参数\"></a>设置header相关参数</h4><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n<th>例子</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-A</td>\n<td>设置user-agent</td>\n<td>curl -A ‘Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 SaHari/537.36’ <a href=\"https://google.com/\">https://google.com</a></td>\n</tr>\n<tr>\n<td>-H</td>\n<td>指定对应的header，可以多个-H连写</td>\n<td>curl -H ‘Accept-Language: en-US’ -H ‘Secret-Message: xyzzy’ <a href=\"https://google.com/\">https://google.com</a></td>\n</tr>\n<tr>\n<td>-b</td>\n<td>设置cookie，可以多个-b连写</td>\n<td>curl -b ‘foo=bar’ <a href=\"https://google.com/\">https://google.com</a> 向服务器发送一个名为foo，值为bar的cookie</td>\n</tr>\n<tr>\n<td>-b file</td>\n<td>设置cookie文件</td>\n<td>curl -b cookies.txt <a href=\"https://www.google.com/\">https://www.google.com</a></td>\n</tr>\n<tr>\n<td>-e</td>\n<td>设置referer</td>\n<td>curl -e ‘<a href=\"https://google.com/?q=example&#39;\">https://google.com?q=example&#39;</a> <a href=\"https://www.example.com/\">https://www.example.com</a></td>\n</tr>\n<tr>\n<td>-u</td>\n<td>账号密码授权</td>\n<td>curl -u ‘bob:12345’ <a href=\"https://google.com/login\">https://google.com/login</a></td>\n</tr>\n</tbody></table>\n<h4 id=\"引导设置\"><a href=\"#引导设置\" class=\"headerlink\" title=\"引导设置\"></a>引导设置</h4><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n<th>例子</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-X</td>\n<td>指定请求方式，GET，POST，HEAD，PUT等</td>\n<td>curl -X POST <a href=\"https://www.example.com/\">https://www.example.com</a></td>\n</tr>\n<tr>\n<td>-L</td>\n<td>允许重定向，默认CURL是不跟随重定向的</td>\n<td>curl -L <a href=\"http://catonmat.net/\">http://catonmat.net</a></td>\n</tr>\n<tr>\n<td>-x</td>\n<td>设置代理</td>\n<td>curl -x socks5://james:<a href=\"mailto:&#x63;&#97;&#x74;&#115;&#64;&#109;&#121;&#x70;&#x72;&#111;&#120;&#x79;&#46;&#99;&#x6f;&#109;\">&#x63;&#97;&#x74;&#115;&#64;&#109;&#121;&#x70;&#x72;&#111;&#120;&#x79;&#46;&#99;&#x6f;&#109;</a>:8080 <a href=\"https://catonmat.net/\">https://catonmat.net</a></td>\n</tr>\n<tr>\n<td>-k</td>\n<td>跳过HTTPS校验，不检查证书是否正确</td>\n<td>curl -k <a href=\"https://www.example.com/\">https://www.example.com</a></td>\n</tr>\n<tr>\n<td>–resolve HOST:PORT:ADDRESS</td>\n<td>强制解析HOST到对应的IP:PORT，非常好用，可以配合通配符使用</td>\n<td>curl <a href=\"https://datapixxxx.cn/\">https://datapixxxx.cn/</a> –resolve *:443:1.1.1.1</td>\n</tr>\n<tr>\n<td>-K 或 –config  FILE</td>\n<td>指定配置文件,里面的内容按 每个参数一行进行设置</td>\n<td>curl -K config.txt <a href=\"https://www.example.com/\">https://www.example.com</a></td>\n</tr>\n</tbody></table>\n<h4 id=\"获取内容\"><a href=\"#获取内容\" class=\"headerlink\" title=\"获取内容\"></a>获取内容</h4><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n<th>例子</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-c  file</td>\n<td>将服务器发送的cookie保存到对应的文件</td>\n<td>curl -c cookies.txt <a href=\"https://www.google.com/\">https://www.google.com</a></td>\n</tr>\n<tr>\n<td>-o  file</td>\n<td>将服务器响应保存到文件</td>\n<td>curl -o example.html <a href=\"https://www.example.com/\">https://www.example.com</a></td>\n</tr>\n<tr>\n<td>-v</td>\n<td>打印整个请求过程，用于调试</td>\n<td>curl -v <a href=\"https://www.example.com/\">https://www.example.com</a></td>\n</tr>\n<tr>\n<td>-i</td>\n<td>打印服务器响应的header</td>\n<td>curl -i <a href=\"https://www.example.com/\">https://www.example.com</a></td>\n</tr>\n<tr>\n<td>-# 或者 –progress-bar</td>\n<td>显示进度条</td>\n<td>curl -# -i <a href=\"https://www.example.com/\">https://www.example.com</a></td>\n</tr>\n</tbody></table>\n<h4 id=\"调试打印\"><a href=\"#调试打印\" class=\"headerlink\" title=\"调试打印\"></a>调试打印</h4><p>如果本地无法连接服务器，或响应很慢，我们肯定想知道是中间哪个环节出了问题</p>\n<p>这时候就需要使用-w参数，打印一些请求过程的参数，方便我们排查问题</p>\n<p>其中比较常用的参数如下</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>time_connect</td>\n<td>建立TCP连接花费的时间</td>\n</tr>\n<tr>\n<td>time_namelookup</td>\n<td>DNS查询花费的时间</td>\n</tr>\n<tr>\n<td>time_total</td>\n<td>全部完成花费时间</td>\n</tr>\n<tr>\n<td>remote_ip</td>\n<td>服务器IP</td>\n</tr>\n<tr>\n<td>remote_port</td>\n<td>服务器端口</td>\n</tr>\n<tr>\n<td>time_redirect</td>\n<td>重定向花费时间，包括重定向的DNS查询到完成响应的时间</td>\n</tr>\n</tbody></table>\n<p>下面是一个简单的例子</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl  https://www.example.com -w &#x27;TCP连接时间:%&#123;time_connect&#125;\\nDNS时间:%&#123;time_namelookup&#125;\\n全部时间:%&#123;time_total&#125;\\n服务器IP:%&#123;remote_ip&#125;\\n&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>响应如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TCP连接时间:1.154614</span><br><span class=\"line\">DNS时间:0.000895</span><br><span class=\"line\">全部时间:2.381030</span><br><span class=\"line\">服务器IP:93.184.216.34</span><br></pre></td></tr></table></figure>\n"},{"title":"GO错误异常处理","date":"2022-05-14T05:50:58.000Z","_content":"\n# 错误处理\n\n在GO语言中处理错误，通过接口来处理\n\n```go\npackage builtin\n\ntype error interface {\n\tError() string\n}\n```\n\n在其他语言中，错误有可能是错误码，有可能是错误信息\n\n错误处理非常重要，go语言将其统一成为接口，如果需要获取错误的信息，则调用error()接口，返回错误信息字符串，这统一了错误信息，都作为字符串输出\n\n## 问题\n\n在错误处理的流程中，在其他语言中类似java，提供了try-catch-finally方式来处理，但go的err则会编写一大串对应的错误处理代码，显得非常冗长\n\n```go\npackage main\n\nfunc main() {\n\terr := doSomething()\n\tif err != nil {\n\t\t//handle error ...\n\t}\n\n\terr = doSomething2()\n\tif err != nil {\n\t\t//handle error ...\n\t}\n\n\terr = doSomething3()\n\tif err != nil {\n\t\t//handle error ...\n\t}\n}\n```\n\n这些问题在go的作者群体中，也产生过大量的讨论和修改建议，但目前没有形成统一的新的处理方案\n\nFAQ里面也有提到 try-catch 会让代码变得非常混乱，对于真正的异常，作者希望通过panic-recover机制进行处理，这样代码看起来更简洁\n\n```go\npackage main\n\nfunc main() {\n\tdefer func() {\n\t\tif err := recover(); err != nil {\n\t\t\t//handle panic ...\n\t\t}\n\t}()\n\n\terr := doSomething()\n\tif err != nil {\n\t\t//handle error ...\n\t}\n}\n```\n\n## 如何理解error\n\n事实上，作者们已经形成了很多醒世名言，下面抽选关于错误和异常相关的进行解释\n\n```\nErrors are just a value.\nDon't just check errors,handle them gracefully.\nDon't panic.\n```\n\n### Errors are just a value.(错误只是一种值)\n\n事实上错误的处理可分为三种情况：\n* Sentinel errors （哨兵错误）\n* Error Types （类型错误）\n* Opaque errors （黑盒错误）\n\n###### Sentinel errors （哨兵错误）\n\n通常情况下，出现某种错误，程序流程就不能继续往下执行了\n\n但在实际使用过程中，往往会定义很多对应的哨兵错误，并且业务代码与它强耦合，这会导致引用很多包的时候，他们的错误意义是接近的，但却要写出大量意义相近的错误处理流程\n\n```go\nif  err == io.EOF {\n//todo \n} else if err == io.ErrUnexpectedEOF {\n//todo \n}\n```\n\n###### Error Types （类型错误）\n\n它指的是实现了错误接口的类型错误，其中可以附带其他字段，提供更多信息，如\n\n```\ntype BussinessError struct {\n    BusinessCode int\n    Caller string\n    Err error\n}\n```\n\n在这个错误中，我们额外增加的 业务code，和调用者 等信息\n\n通常在这种情况的错误处理，我们需要使用**类型断言**来进行处理，如\n\n```\nfunc handleErr(err error) string {\n\tswitch err := err.(type) {\n\tcase BusinessError:\n\t\treturn err.Error()\n\tcase DBError:\n\t\treturn err.Error()\n\tcase CacheError:\n\t\treturn err.Error()\n\t}\n\treturn \"\"\n}\n```\n\n与哨兵错误类似，业务代码与它强耦合，增加了更多信息，方便根据信息处理不同的情况，减少了哨兵错误定义的数量，但大量错误逻辑仍然是需要\n\n###### Opaque errors （黑盒错误）\n\n最后一种则是最直接的，不管接收到什么错误，都直接返回错误\n\n```\nif err := doSomething(); err != nil {\n    return err\n}\n```\n\n### Don't just check errors,handle them gracefully.（优雅地处理错误）\n\n在GO语音中，提供了很多对错误进行优化处理的方案\n\n```\n//对error信息进行包装,并且带上调用栈信息\nerrors.Wrap(err error, message string) error {}\n//按格式进行包装,并且带上调用栈信息\nerrors.Wrapf(err error, format string, args ...interface{}) error\n//对error进行解包，实现cause接口的error\nerrors.Cause(err error) error \n```\n\n### Only handle error once（只处理错误一次）\n\n在业务代码中，常常会写出很深的调用链\n\n这时候如果每一层都对错误进行处理，如打印日志，则打印大量相同的日志\n\n因此在GO的设计中，它希望的是最上层调用者进行处理，底层捕获的error，对其进行warp，这样就能暴露调用链，同时也不会在各个层级产生大量相同的错误处理代码\n\n### Don't Panic (不要滥用异常)\n\n在GO语言的设计中，每个Gorutines都是独立的，因此并没有父子Gorutines的说法，更不能捕获其他gorutine的panic\n\n在一个gorutine中没有设置defer recover函数，发生panic则后果是灾难，会导致整个go程序退出\n\n**在GO语言的作者中认为，只有发生不可挽回的事情，才需要触发panic，避免事故影响扩大**\n\n**如果把panic当做error使用，则会导致无法正常区分哪些是灾难异常，哪些是业务错误**\n\n# 后续\n\n事实上，go目前的错误处理并不完美，在作者群体中，对go的错误处理也有广泛的讨论，并且把它作为go 2 版本的优化重点\n\n我们可以对官方信息保持关注\n\n[Go 2 官方草案](https://go.googlesource.com/proposal/+/master/design/go2draft.md \"Go 2 官方草案\")。\n\n","source":"_posts/GO错误异常处理.md","raw":"---\ntitle: GO错误异常处理 \ndate: 2022-05-14 13:50:58 \ncategories:\n- GO语言 \ntags:\n- GO语言\n---\n\n# 错误处理\n\n在GO语言中处理错误，通过接口来处理\n\n```go\npackage builtin\n\ntype error interface {\n\tError() string\n}\n```\n\n在其他语言中，错误有可能是错误码，有可能是错误信息\n\n错误处理非常重要，go语言将其统一成为接口，如果需要获取错误的信息，则调用error()接口，返回错误信息字符串，这统一了错误信息，都作为字符串输出\n\n## 问题\n\n在错误处理的流程中，在其他语言中类似java，提供了try-catch-finally方式来处理，但go的err则会编写一大串对应的错误处理代码，显得非常冗长\n\n```go\npackage main\n\nfunc main() {\n\terr := doSomething()\n\tif err != nil {\n\t\t//handle error ...\n\t}\n\n\terr = doSomething2()\n\tif err != nil {\n\t\t//handle error ...\n\t}\n\n\terr = doSomething3()\n\tif err != nil {\n\t\t//handle error ...\n\t}\n}\n```\n\n这些问题在go的作者群体中，也产生过大量的讨论和修改建议，但目前没有形成统一的新的处理方案\n\nFAQ里面也有提到 try-catch 会让代码变得非常混乱，对于真正的异常，作者希望通过panic-recover机制进行处理，这样代码看起来更简洁\n\n```go\npackage main\n\nfunc main() {\n\tdefer func() {\n\t\tif err := recover(); err != nil {\n\t\t\t//handle panic ...\n\t\t}\n\t}()\n\n\terr := doSomething()\n\tif err != nil {\n\t\t//handle error ...\n\t}\n}\n```\n\n## 如何理解error\n\n事实上，作者们已经形成了很多醒世名言，下面抽选关于错误和异常相关的进行解释\n\n```\nErrors are just a value.\nDon't just check errors,handle them gracefully.\nDon't panic.\n```\n\n### Errors are just a value.(错误只是一种值)\n\n事实上错误的处理可分为三种情况：\n* Sentinel errors （哨兵错误）\n* Error Types （类型错误）\n* Opaque errors （黑盒错误）\n\n###### Sentinel errors （哨兵错误）\n\n通常情况下，出现某种错误，程序流程就不能继续往下执行了\n\n但在实际使用过程中，往往会定义很多对应的哨兵错误，并且业务代码与它强耦合，这会导致引用很多包的时候，他们的错误意义是接近的，但却要写出大量意义相近的错误处理流程\n\n```go\nif  err == io.EOF {\n//todo \n} else if err == io.ErrUnexpectedEOF {\n//todo \n}\n```\n\n###### Error Types （类型错误）\n\n它指的是实现了错误接口的类型错误，其中可以附带其他字段，提供更多信息，如\n\n```\ntype BussinessError struct {\n    BusinessCode int\n    Caller string\n    Err error\n}\n```\n\n在这个错误中，我们额外增加的 业务code，和调用者 等信息\n\n通常在这种情况的错误处理，我们需要使用**类型断言**来进行处理，如\n\n```\nfunc handleErr(err error) string {\n\tswitch err := err.(type) {\n\tcase BusinessError:\n\t\treturn err.Error()\n\tcase DBError:\n\t\treturn err.Error()\n\tcase CacheError:\n\t\treturn err.Error()\n\t}\n\treturn \"\"\n}\n```\n\n与哨兵错误类似，业务代码与它强耦合，增加了更多信息，方便根据信息处理不同的情况，减少了哨兵错误定义的数量，但大量错误逻辑仍然是需要\n\n###### Opaque errors （黑盒错误）\n\n最后一种则是最直接的，不管接收到什么错误，都直接返回错误\n\n```\nif err := doSomething(); err != nil {\n    return err\n}\n```\n\n### Don't just check errors,handle them gracefully.（优雅地处理错误）\n\n在GO语音中，提供了很多对错误进行优化处理的方案\n\n```\n//对error信息进行包装,并且带上调用栈信息\nerrors.Wrap(err error, message string) error {}\n//按格式进行包装,并且带上调用栈信息\nerrors.Wrapf(err error, format string, args ...interface{}) error\n//对error进行解包，实现cause接口的error\nerrors.Cause(err error) error \n```\n\n### Only handle error once（只处理错误一次）\n\n在业务代码中，常常会写出很深的调用链\n\n这时候如果每一层都对错误进行处理，如打印日志，则打印大量相同的日志\n\n因此在GO的设计中，它希望的是最上层调用者进行处理，底层捕获的error，对其进行warp，这样就能暴露调用链，同时也不会在各个层级产生大量相同的错误处理代码\n\n### Don't Panic (不要滥用异常)\n\n在GO语言的设计中，每个Gorutines都是独立的，因此并没有父子Gorutines的说法，更不能捕获其他gorutine的panic\n\n在一个gorutine中没有设置defer recover函数，发生panic则后果是灾难，会导致整个go程序退出\n\n**在GO语言的作者中认为，只有发生不可挽回的事情，才需要触发panic，避免事故影响扩大**\n\n**如果把panic当做error使用，则会导致无法正常区分哪些是灾难异常，哪些是业务错误**\n\n# 后续\n\n事实上，go目前的错误处理并不完美，在作者群体中，对go的错误处理也有广泛的讨论，并且把它作为go 2 版本的优化重点\n\n我们可以对官方信息保持关注\n\n[Go 2 官方草案](https://go.googlesource.com/proposal/+/master/design/go2draft.md \"Go 2 官方草案\")。\n\n","slug":"GO错误异常处理","published":1,"updated":"2022-05-14T15:44:59.812Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3br98rc0006pkthdm8phfih","content":"<h1 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h1><p>在GO语言中处理错误，通过接口来处理</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> builtin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"type\">error</span> <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tError() <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在其他语言中，错误有可能是错误码，有可能是错误信息</p>\n<p>错误处理非常重要，go语言将其统一成为接口，如果需要获取错误的信息，则调用error()接口，返回错误信息字符串，这统一了错误信息，都作为字符串输出</p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>在错误处理的流程中，在其他语言中类似java，提供了try-catch-finally方式来处理，但go的err则会编写一大串对应的错误处理代码，显得非常冗长</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\terr := doSomething()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//handle error ...</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\terr = doSomething2()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//handle error ...</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\terr = doSomething3()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//handle error ...</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这些问题在go的作者群体中，也产生过大量的讨论和修改建议，但目前没有形成统一的新的处理方案</p>\n<p>FAQ里面也有提到 try-catch 会让代码变得非常混乱，对于真正的异常，作者希望通过panic-recover机制进行处理，这样代码看起来更简洁</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err := <span class=\"built_in\">recover</span>(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//handle panic ...</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">\terr := doSomething()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//handle error ...</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"如何理解error\"><a href=\"#如何理解error\" class=\"headerlink\" title=\"如何理解error\"></a>如何理解error</h2><p>事实上，作者们已经形成了很多醒世名言，下面抽选关于错误和异常相关的进行解释</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Errors are just a value.</span><br><span class=\"line\">Don&#x27;t just check errors,handle them gracefully.</span><br><span class=\"line\">Don&#x27;t panic.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Errors-are-just-a-value-错误只是一种值\"><a href=\"#Errors-are-just-a-value-错误只是一种值\" class=\"headerlink\" title=\"Errors are just a value.(错误只是一种值)\"></a>Errors are just a value.(错误只是一种值)</h3><p>事实上错误的处理可分为三种情况：</p>\n<ul>\n<li>Sentinel errors （哨兵错误）</li>\n<li>Error Types （类型错误）</li>\n<li>Opaque errors （黑盒错误）</li>\n</ul>\n<h6 id=\"Sentinel-errors-（哨兵错误）\"><a href=\"#Sentinel-errors-（哨兵错误）\" class=\"headerlink\" title=\"Sentinel errors （哨兵错误）\"></a>Sentinel errors （哨兵错误）</h6><p>通常情况下，出现某种错误，程序流程就不能继续往下执行了</p>\n<p>但在实际使用过程中，往往会定义很多对应的哨兵错误，并且业务代码与它强耦合，这会导致引用很多包的时候，他们的错误意义是接近的，但却要写出大量意义相近的错误处理流程</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>  err == io.EOF &#123;</span><br><span class=\"line\"><span class=\"comment\">//todo </span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> err == io.ErrUnexpectedEOF &#123;</span><br><span class=\"line\"><span class=\"comment\">//todo </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"Error-Types-（类型错误）\"><a href=\"#Error-Types-（类型错误）\" class=\"headerlink\" title=\"Error Types （类型错误）\"></a>Error Types （类型错误）</h6><p>它指的是实现了错误接口的类型错误，其中可以附带其他字段，提供更多信息，如</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type BussinessError struct &#123;</span><br><span class=\"line\">    BusinessCode int</span><br><span class=\"line\">    Caller string</span><br><span class=\"line\">    Err error</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个错误中，我们额外增加的 业务code，和调用者 等信息</p>\n<p>通常在这种情况的错误处理，我们需要使用<strong>类型断言</strong>来进行处理，如</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func handleErr(err error) string &#123;</span><br><span class=\"line\">\tswitch err := err.(type) &#123;</span><br><span class=\"line\">\tcase BusinessError:</span><br><span class=\"line\">\t\treturn err.Error()</span><br><span class=\"line\">\tcase DBError:</span><br><span class=\"line\">\t\treturn err.Error()</span><br><span class=\"line\">\tcase CacheError:</span><br><span class=\"line\">\t\treturn err.Error()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn &quot;&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>与哨兵错误类似，业务代码与它强耦合，增加了更多信息，方便根据信息处理不同的情况，减少了哨兵错误定义的数量，但大量错误逻辑仍然是需要</p>\n<h6 id=\"Opaque-errors-（黑盒错误）\"><a href=\"#Opaque-errors-（黑盒错误）\" class=\"headerlink\" title=\"Opaque errors （黑盒错误）\"></a>Opaque errors （黑盒错误）</h6><p>最后一种则是最直接的，不管接收到什么错误，都直接返回错误</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if err := doSomething(); err != nil &#123;</span><br><span class=\"line\">    return err</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Don’t-just-check-errors-handle-them-gracefully-（优雅地处理错误）\"><a href=\"#Don’t-just-check-errors-handle-them-gracefully-（优雅地处理错误）\" class=\"headerlink\" title=\"Don’t just check errors,handle them gracefully.（优雅地处理错误）\"></a>Don’t just check errors,handle them gracefully.（优雅地处理错误）</h3><p>在GO语音中，提供了很多对错误进行优化处理的方案</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//对error信息进行包装,并且带上调用栈信息</span><br><span class=\"line\">errors.Wrap(err error, message string) error &#123;&#125;</span><br><span class=\"line\">//按格式进行包装,并且带上调用栈信息</span><br><span class=\"line\">errors.Wrapf(err error, format string, args ...interface&#123;&#125;) error</span><br><span class=\"line\">//对error进行解包，实现cause接口的error</span><br><span class=\"line\">errors.Cause(err error) error </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Only-handle-error-once（只处理错误一次）\"><a href=\"#Only-handle-error-once（只处理错误一次）\" class=\"headerlink\" title=\"Only handle error once（只处理错误一次）\"></a>Only handle error once（只处理错误一次）</h3><p>在业务代码中，常常会写出很深的调用链</p>\n<p>这时候如果每一层都对错误进行处理，如打印日志，则打印大量相同的日志</p>\n<p>因此在GO的设计中，它希望的是最上层调用者进行处理，底层捕获的error，对其进行warp，这样就能暴露调用链，同时也不会在各个层级产生大量相同的错误处理代码</p>\n<h3 id=\"Don’t-Panic-不要滥用异常\"><a href=\"#Don’t-Panic-不要滥用异常\" class=\"headerlink\" title=\"Don’t Panic (不要滥用异常)\"></a>Don’t Panic (不要滥用异常)</h3><p>在GO语言的设计中，每个Gorutines都是独立的，因此并没有父子Gorutines的说法，更不能捕获其他gorutine的panic</p>\n<p>在一个gorutine中没有设置defer recover函数，发生panic则后果是灾难，会导致整个go程序退出</p>\n<p><strong>在GO语言的作者中认为，只有发生不可挽回的事情，才需要触发panic，避免事故影响扩大</strong></p>\n<p><strong>如果把panic当做error使用，则会导致无法正常区分哪些是灾难异常，哪些是业务错误</strong></p>\n<h1 id=\"后续\"><a href=\"#后续\" class=\"headerlink\" title=\"后续\"></a>后续</h1><p>事实上，go目前的错误处理并不完美，在作者群体中，对go的错误处理也有广泛的讨论，并且把它作为go 2 版本的优化重点</p>\n<p>我们可以对官方信息保持关注</p>\n<p><a href=\"https://go.googlesource.com/proposal/+/master/design/go2draft.md\" title=\"Go 2 官方草案\">Go 2 官方草案</a>。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h1><p>在GO语言中处理错误，通过接口来处理</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> builtin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"type\">error</span> <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tError() <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在其他语言中，错误有可能是错误码，有可能是错误信息</p>\n<p>错误处理非常重要，go语言将其统一成为接口，如果需要获取错误的信息，则调用error()接口，返回错误信息字符串，这统一了错误信息，都作为字符串输出</p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>在错误处理的流程中，在其他语言中类似java，提供了try-catch-finally方式来处理，但go的err则会编写一大串对应的错误处理代码，显得非常冗长</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\terr := doSomething()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//handle error ...</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\terr = doSomething2()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//handle error ...</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\terr = doSomething3()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//handle error ...</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这些问题在go的作者群体中，也产生过大量的讨论和修改建议，但目前没有形成统一的新的处理方案</p>\n<p>FAQ里面也有提到 try-catch 会让代码变得非常混乱，对于真正的异常，作者希望通过panic-recover机制进行处理，这样代码看起来更简洁</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err := <span class=\"built_in\">recover</span>(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//handle panic ...</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">\terr := doSomething()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//handle error ...</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"如何理解error\"><a href=\"#如何理解error\" class=\"headerlink\" title=\"如何理解error\"></a>如何理解error</h2><p>事实上，作者们已经形成了很多醒世名言，下面抽选关于错误和异常相关的进行解释</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Errors are just a value.</span><br><span class=\"line\">Don&#x27;t just check errors,handle them gracefully.</span><br><span class=\"line\">Don&#x27;t panic.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Errors-are-just-a-value-错误只是一种值\"><a href=\"#Errors-are-just-a-value-错误只是一种值\" class=\"headerlink\" title=\"Errors are just a value.(错误只是一种值)\"></a>Errors are just a value.(错误只是一种值)</h3><p>事实上错误的处理可分为三种情况：</p>\n<ul>\n<li>Sentinel errors （哨兵错误）</li>\n<li>Error Types （类型错误）</li>\n<li>Opaque errors （黑盒错误）</li>\n</ul>\n<h6 id=\"Sentinel-errors-（哨兵错误）\"><a href=\"#Sentinel-errors-（哨兵错误）\" class=\"headerlink\" title=\"Sentinel errors （哨兵错误）\"></a>Sentinel errors （哨兵错误）</h6><p>通常情况下，出现某种错误，程序流程就不能继续往下执行了</p>\n<p>但在实际使用过程中，往往会定义很多对应的哨兵错误，并且业务代码与它强耦合，这会导致引用很多包的时候，他们的错误意义是接近的，但却要写出大量意义相近的错误处理流程</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>  err == io.EOF &#123;</span><br><span class=\"line\"><span class=\"comment\">//todo </span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> err == io.ErrUnexpectedEOF &#123;</span><br><span class=\"line\"><span class=\"comment\">//todo </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"Error-Types-（类型错误）\"><a href=\"#Error-Types-（类型错误）\" class=\"headerlink\" title=\"Error Types （类型错误）\"></a>Error Types （类型错误）</h6><p>它指的是实现了错误接口的类型错误，其中可以附带其他字段，提供更多信息，如</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type BussinessError struct &#123;</span><br><span class=\"line\">    BusinessCode int</span><br><span class=\"line\">    Caller string</span><br><span class=\"line\">    Err error</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个错误中，我们额外增加的 业务code，和调用者 等信息</p>\n<p>通常在这种情况的错误处理，我们需要使用<strong>类型断言</strong>来进行处理，如</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func handleErr(err error) string &#123;</span><br><span class=\"line\">\tswitch err := err.(type) &#123;</span><br><span class=\"line\">\tcase BusinessError:</span><br><span class=\"line\">\t\treturn err.Error()</span><br><span class=\"line\">\tcase DBError:</span><br><span class=\"line\">\t\treturn err.Error()</span><br><span class=\"line\">\tcase CacheError:</span><br><span class=\"line\">\t\treturn err.Error()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn &quot;&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>与哨兵错误类似，业务代码与它强耦合，增加了更多信息，方便根据信息处理不同的情况，减少了哨兵错误定义的数量，但大量错误逻辑仍然是需要</p>\n<h6 id=\"Opaque-errors-（黑盒错误）\"><a href=\"#Opaque-errors-（黑盒错误）\" class=\"headerlink\" title=\"Opaque errors （黑盒错误）\"></a>Opaque errors （黑盒错误）</h6><p>最后一种则是最直接的，不管接收到什么错误，都直接返回错误</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if err := doSomething(); err != nil &#123;</span><br><span class=\"line\">    return err</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Don’t-just-check-errors-handle-them-gracefully-（优雅地处理错误）\"><a href=\"#Don’t-just-check-errors-handle-them-gracefully-（优雅地处理错误）\" class=\"headerlink\" title=\"Don’t just check errors,handle them gracefully.（优雅地处理错误）\"></a>Don’t just check errors,handle them gracefully.（优雅地处理错误）</h3><p>在GO语音中，提供了很多对错误进行优化处理的方案</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//对error信息进行包装,并且带上调用栈信息</span><br><span class=\"line\">errors.Wrap(err error, message string) error &#123;&#125;</span><br><span class=\"line\">//按格式进行包装,并且带上调用栈信息</span><br><span class=\"line\">errors.Wrapf(err error, format string, args ...interface&#123;&#125;) error</span><br><span class=\"line\">//对error进行解包，实现cause接口的error</span><br><span class=\"line\">errors.Cause(err error) error </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Only-handle-error-once（只处理错误一次）\"><a href=\"#Only-handle-error-once（只处理错误一次）\" class=\"headerlink\" title=\"Only handle error once（只处理错误一次）\"></a>Only handle error once（只处理错误一次）</h3><p>在业务代码中，常常会写出很深的调用链</p>\n<p>这时候如果每一层都对错误进行处理，如打印日志，则打印大量相同的日志</p>\n<p>因此在GO的设计中，它希望的是最上层调用者进行处理，底层捕获的error，对其进行warp，这样就能暴露调用链，同时也不会在各个层级产生大量相同的错误处理代码</p>\n<h3 id=\"Don’t-Panic-不要滥用异常\"><a href=\"#Don’t-Panic-不要滥用异常\" class=\"headerlink\" title=\"Don’t Panic (不要滥用异常)\"></a>Don’t Panic (不要滥用异常)</h3><p>在GO语言的设计中，每个Gorutines都是独立的，因此并没有父子Gorutines的说法，更不能捕获其他gorutine的panic</p>\n<p>在一个gorutine中没有设置defer recover函数，发生panic则后果是灾难，会导致整个go程序退出</p>\n<p><strong>在GO语言的作者中认为，只有发生不可挽回的事情，才需要触发panic，避免事故影响扩大</strong></p>\n<p><strong>如果把panic当做error使用，则会导致无法正常区分哪些是灾难异常，哪些是业务错误</strong></p>\n<h1 id=\"后续\"><a href=\"#后续\" class=\"headerlink\" title=\"后续\"></a>后续</h1><p>事实上，go目前的错误处理并不完美，在作者群体中，对go的错误处理也有广泛的讨论，并且把它作为go 2 版本的优化重点</p>\n<p>我们可以对官方信息保持关注</p>\n<p><a href=\"https://go.googlesource.com/proposal/+/master/design/go2draft.md\" title=\"Go 2 官方草案\">Go 2 官方草案</a>。</p>\n"},{"title":"GO Time包使用示例","date":"2022-05-14T13:46:06.000Z","_content":"\n# GO Time包使用示例\n\n在GO语言中,时间相关的包为**time**\n\n我们可以直接看go源码的src文件，里面有关于timer这个包的test代码\n\n下面列举部分常用的time相关函数\n\n## 定时器\n\n##### time.After()\n\n在时间结束后往写入通道\n\n例子如下：\n\n```\nfunc ExampleAfter() {\n\tselect {\n\tcase m := <-c:\n\t\thandle(m)\n\tcase <-time.After(10 * time.Second):\n\t\tfmt.Println(\"timed out\")\n\t}\n}\n```\n\n##### time.AfterFunc()\n\n固定时间后执行函数\n\n```\nfunc TestAfterFunc(t *testing.T) {\n\tc := make(chan bool)\n\tvar f func()\n\tfmt.Println(\"开始：\" + time.Now().String())\n\tf = func() {\n\t\tfmt.Println(\"触发定时：\" + time.Now().String())\n\t\tc <- true\n\t}\n\n\ttime.AfterFunc(time.Second*10, f)\n\t<-c\n}\n```\n\n```\n开始：2022-05-14 22:53:18.706485 +0800 CST m=+0.000048501\n触发定时：2022-05-14 22:53:28.707644 +0800 CST m=+10.001264751\n```\n\n##### time.Tick()\n\n生成一个定时器，示例如下\n\n```\nc := time.Tick(5 * time.Second)\nfor next := range c {\n\tfmt.Printf(\"date：%v timeSteamp：%v\\n\", next.Format(time.RFC3339), next.Unix())\n}\n```\n\n```\n/*\ndate：2022-05-14T22:13:53+08:00 timeSteamp：1652537633\ndate：2022-05-14T22:13:58+08:00 timeSteamp：1652537638\ndate：2022-05-14T22:14:03+08:00 timeSteamp：1652537643\n*/\n```\n\n这个例子很有意思，原因在于使用range来读取管道，而且并没有提供关闭这个通道的方法，文档提示它不能被GC回收，使用不当会导致内存泄漏\n\n文档解释说：如果您的程序不需要释放关闭的情况下，使用这个方法是合理的\n\n##### time.NewTicker()\n\n相比刚刚的tick函数，这个ticker似乎有更完善的机制\n\n提供**ticker.Stop**来释放资源\n\n提供**ticker.Reset**来重置\n\n官方示例如下：\n\n```\n\tticker := time.NewTicker(time.Second)\n\tdefer ticker.Stop()\n\tdone := make(chan bool)\n\tgo func() {\n\t\ttime.Sleep(10 * time.Second)\n\t\tdone <- true\n\t}()\n\tfor {\n\t\tselect {\n\t\tcase <-done:\n\t\t\tfmt.Println(\"Done!\")\n\t\t\treturn\n\t\tcase t := <-ticker.C:\n\t\t\tfmt.Println(\"Current time: \", t)\n\t\t}\n\t}\n```\n\n## 定时器准确性\n\n定时器实际上也是由CPU轮询触发的，因此必定会遭遇系统中断等情况，导致实际触发时间有差异\n\n一般而言，目前认为定时器能做到毫秒级的准确性\n\n需要注意的是go在1.14版本之后的实现，由每个P队列挂载时间堆来实现\n\n而堆的结构，顶部节点为最小值，所有的定时器，实际上就是往堆里面不断写入到期时间，即顶部的到期时间最近，他到期了，才有可能到下一层节点上的元素到期\n\n因此涉及到 堆的更新和查询\n\n目前定时器使用的堆为四叉堆，目的是为了降低层级，查询时间复杂度为O(log4 N)，查询时间有相比二叉堆有一定提升\n\n#### Parse 解析时间\n\n官方的支持的时间解析格式并不是特别友好，建议使用carbon库来解决相关问题\n\n#### TimeZone\n\n默认解释的时间区为UTC时间，一般情况下，我们转换为字符串时，需要改为 **Asia/Shanghai**时区\n\n```\n\tloc, _ := time.LoadLocation(\"Asia/Shanghai\")\n\tconst shortForm = \"2006-Jan-02\"\n\tt, _ = time.ParseInLocation(shortForm, \"2012-Jul-09\", loc)\n\tfmt.Println(t)\n```\n\n#### 时间间隔 （Duration）\n\n##### 字符串解析 **time.ParseDuration**\n\n```\n//根据字符串解释为时间间隔\n//格式 如 10h 1h10m10s 1µs 300ms\n// Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\".\nhours, _ := time.ParseDuration(\"10h\")\nfmt.Printf(\"There are %.0f seconds in %v.\\n\", hours.Seconds(), hours)\n// There are 36000 seconds in 10h0m0s.\n```\n\n##### 计算时间间隔 \n\n##### time.Since()\n\n如在一些任务执行完毕以后，计算它的耗时\n\n```\n\tstart := time.Now()\n\t//doSomething\n\ttime.Sleep(time.Second * 2)\n\tdefer func() {\n\t\ttimeSpent := time.Since(start)\n\t\tfmt.Println(\"consume time:\" + timeSpent.String())\n\t}()\n```\n\n```\nconsume time:2.001047625s\n```\n\n\n##### time.Until() \n\n到某个时间的的间隔，负数表示在输入时间之前\n\n\n\n\n## 总结\n\n定时器是很常见的包组件，它的精度是大家需要留意的。\n","source":"_posts/Time包使用示例.md","raw":"---\ntitle: GO Time包使用示例 \ndate: 2022-05-14 21:46:06 \ncategories:\n- GO语言 \ntags:\n- GO语言\n---\n\n# GO Time包使用示例\n\n在GO语言中,时间相关的包为**time**\n\n我们可以直接看go源码的src文件，里面有关于timer这个包的test代码\n\n下面列举部分常用的time相关函数\n\n## 定时器\n\n##### time.After()\n\n在时间结束后往写入通道\n\n例子如下：\n\n```\nfunc ExampleAfter() {\n\tselect {\n\tcase m := <-c:\n\t\thandle(m)\n\tcase <-time.After(10 * time.Second):\n\t\tfmt.Println(\"timed out\")\n\t}\n}\n```\n\n##### time.AfterFunc()\n\n固定时间后执行函数\n\n```\nfunc TestAfterFunc(t *testing.T) {\n\tc := make(chan bool)\n\tvar f func()\n\tfmt.Println(\"开始：\" + time.Now().String())\n\tf = func() {\n\t\tfmt.Println(\"触发定时：\" + time.Now().String())\n\t\tc <- true\n\t}\n\n\ttime.AfterFunc(time.Second*10, f)\n\t<-c\n}\n```\n\n```\n开始：2022-05-14 22:53:18.706485 +0800 CST m=+0.000048501\n触发定时：2022-05-14 22:53:28.707644 +0800 CST m=+10.001264751\n```\n\n##### time.Tick()\n\n生成一个定时器，示例如下\n\n```\nc := time.Tick(5 * time.Second)\nfor next := range c {\n\tfmt.Printf(\"date：%v timeSteamp：%v\\n\", next.Format(time.RFC3339), next.Unix())\n}\n```\n\n```\n/*\ndate：2022-05-14T22:13:53+08:00 timeSteamp：1652537633\ndate：2022-05-14T22:13:58+08:00 timeSteamp：1652537638\ndate：2022-05-14T22:14:03+08:00 timeSteamp：1652537643\n*/\n```\n\n这个例子很有意思，原因在于使用range来读取管道，而且并没有提供关闭这个通道的方法，文档提示它不能被GC回收，使用不当会导致内存泄漏\n\n文档解释说：如果您的程序不需要释放关闭的情况下，使用这个方法是合理的\n\n##### time.NewTicker()\n\n相比刚刚的tick函数，这个ticker似乎有更完善的机制\n\n提供**ticker.Stop**来释放资源\n\n提供**ticker.Reset**来重置\n\n官方示例如下：\n\n```\n\tticker := time.NewTicker(time.Second)\n\tdefer ticker.Stop()\n\tdone := make(chan bool)\n\tgo func() {\n\t\ttime.Sleep(10 * time.Second)\n\t\tdone <- true\n\t}()\n\tfor {\n\t\tselect {\n\t\tcase <-done:\n\t\t\tfmt.Println(\"Done!\")\n\t\t\treturn\n\t\tcase t := <-ticker.C:\n\t\t\tfmt.Println(\"Current time: \", t)\n\t\t}\n\t}\n```\n\n## 定时器准确性\n\n定时器实际上也是由CPU轮询触发的，因此必定会遭遇系统中断等情况，导致实际触发时间有差异\n\n一般而言，目前认为定时器能做到毫秒级的准确性\n\n需要注意的是go在1.14版本之后的实现，由每个P队列挂载时间堆来实现\n\n而堆的结构，顶部节点为最小值，所有的定时器，实际上就是往堆里面不断写入到期时间，即顶部的到期时间最近，他到期了，才有可能到下一层节点上的元素到期\n\n因此涉及到 堆的更新和查询\n\n目前定时器使用的堆为四叉堆，目的是为了降低层级，查询时间复杂度为O(log4 N)，查询时间有相比二叉堆有一定提升\n\n#### Parse 解析时间\n\n官方的支持的时间解析格式并不是特别友好，建议使用carbon库来解决相关问题\n\n#### TimeZone\n\n默认解释的时间区为UTC时间，一般情况下，我们转换为字符串时，需要改为 **Asia/Shanghai**时区\n\n```\n\tloc, _ := time.LoadLocation(\"Asia/Shanghai\")\n\tconst shortForm = \"2006-Jan-02\"\n\tt, _ = time.ParseInLocation(shortForm, \"2012-Jul-09\", loc)\n\tfmt.Println(t)\n```\n\n#### 时间间隔 （Duration）\n\n##### 字符串解析 **time.ParseDuration**\n\n```\n//根据字符串解释为时间间隔\n//格式 如 10h 1h10m10s 1µs 300ms\n// Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\".\nhours, _ := time.ParseDuration(\"10h\")\nfmt.Printf(\"There are %.0f seconds in %v.\\n\", hours.Seconds(), hours)\n// There are 36000 seconds in 10h0m0s.\n```\n\n##### 计算时间间隔 \n\n##### time.Since()\n\n如在一些任务执行完毕以后，计算它的耗时\n\n```\n\tstart := time.Now()\n\t//doSomething\n\ttime.Sleep(time.Second * 2)\n\tdefer func() {\n\t\ttimeSpent := time.Since(start)\n\t\tfmt.Println(\"consume time:\" + timeSpent.String())\n\t}()\n```\n\n```\nconsume time:2.001047625s\n```\n\n\n##### time.Until() \n\n到某个时间的的间隔，负数表示在输入时间之前\n\n\n\n\n## 总结\n\n定时器是很常见的包组件，它的精度是大家需要留意的。\n","slug":"Time包使用示例","published":1,"updated":"2022-05-15T01:34:09.524Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3br98rd0007pkth0qcpgltt","content":"<h1 id=\"GO-Time包使用示例\"><a href=\"#GO-Time包使用示例\" class=\"headerlink\" title=\"GO Time包使用示例\"></a>GO Time包使用示例</h1><p>在GO语言中,时间相关的包为<strong>time</strong></p>\n<p>我们可以直接看go源码的src文件，里面有关于timer这个包的test代码</p>\n<p>下面列举部分常用的time相关函数</p>\n<h2 id=\"定时器\"><a href=\"#定时器\" class=\"headerlink\" title=\"定时器\"></a>定时器</h2><h5 id=\"time-After\"><a href=\"#time-After\" class=\"headerlink\" title=\"time.After()\"></a>time.After()</h5><p>在时间结束后往写入通道</p>\n<p>例子如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func ExampleAfter() &#123;</span><br><span class=\"line\">\tselect &#123;</span><br><span class=\"line\">\tcase m := &lt;-c:</span><br><span class=\"line\">\t\thandle(m)</span><br><span class=\"line\">\tcase &lt;-time.After(10 * time.Second):</span><br><span class=\"line\">\t\tfmt.Println(&quot;timed out&quot;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"time-AfterFunc\"><a href=\"#time-AfterFunc\" class=\"headerlink\" title=\"time.AfterFunc()\"></a>time.AfterFunc()</h5><p>固定时间后执行函数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func TestAfterFunc(t *testing.T) &#123;</span><br><span class=\"line\">\tc := make(chan bool)</span><br><span class=\"line\">\tvar f func()</span><br><span class=\"line\">\tfmt.Println(&quot;开始：&quot; + time.Now().String())</span><br><span class=\"line\">\tf = func() &#123;</span><br><span class=\"line\">\t\tfmt.Println(&quot;触发定时：&quot; + time.Now().String())</span><br><span class=\"line\">\t\tc &lt;- true</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttime.AfterFunc(time.Second*10, f)</span><br><span class=\"line\">\t&lt;-c</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">开始：2022-05-14 22:53:18.706485 +0800 CST m=+0.000048501</span><br><span class=\"line\">触发定时：2022-05-14 22:53:28.707644 +0800 CST m=+10.001264751</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"time-Tick\"><a href=\"#time-Tick\" class=\"headerlink\" title=\"time.Tick()\"></a>time.Tick()</h5><p>生成一个定时器，示例如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c := time.Tick(5 * time.Second)</span><br><span class=\"line\">for next := range c &#123;</span><br><span class=\"line\">\tfmt.Printf(&quot;date：%v timeSteamp：%v\\n&quot;, next.Format(time.RFC3339), next.Unix())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\">date：2022-05-14T22:13:53+08:00 timeSteamp：1652537633</span><br><span class=\"line\">date：2022-05-14T22:13:58+08:00 timeSteamp：1652537638</span><br><span class=\"line\">date：2022-05-14T22:14:03+08:00 timeSteamp：1652537643</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n\n<p>这个例子很有意思，原因在于使用range来读取管道，而且并没有提供关闭这个通道的方法，文档提示它不能被GC回收，使用不当会导致内存泄漏</p>\n<p>文档解释说：如果您的程序不需要释放关闭的情况下，使用这个方法是合理的</p>\n<h5 id=\"time-NewTicker\"><a href=\"#time-NewTicker\" class=\"headerlink\" title=\"time.NewTicker()\"></a>time.NewTicker()</h5><p>相比刚刚的tick函数，这个ticker似乎有更完善的机制</p>\n<p>提供<strong>ticker.Stop</strong>来释放资源</p>\n<p>提供<strong>ticker.Reset</strong>来重置</p>\n<p>官方示例如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ticker := time.NewTicker(time.Second)</span><br><span class=\"line\">defer ticker.Stop()</span><br><span class=\"line\">done := make(chan bool)</span><br><span class=\"line\">go func() &#123;</span><br><span class=\"line\">\ttime.Sleep(10 * time.Second)</span><br><span class=\"line\">\tdone &lt;- true</span><br><span class=\"line\">&#125;()</span><br><span class=\"line\">for &#123;</span><br><span class=\"line\">\tselect &#123;</span><br><span class=\"line\">\tcase &lt;-done:</span><br><span class=\"line\">\t\tfmt.Println(&quot;Done!&quot;)</span><br><span class=\"line\">\t\treturn</span><br><span class=\"line\">\tcase t := &lt;-ticker.C:</span><br><span class=\"line\">\t\tfmt.Println(&quot;Current time: &quot;, t)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"定时器准确性\"><a href=\"#定时器准确性\" class=\"headerlink\" title=\"定时器准确性\"></a>定时器准确性</h2><p>定时器实际上也是由CPU轮询触发的，因此必定会遭遇系统中断等情况，导致实际触发时间有差异</p>\n<p>一般而言，目前认为定时器能做到毫秒级的准确性</p>\n<p>需要注意的是go在1.14版本之后的实现，由每个P队列挂载时间堆来实现</p>\n<p>而堆的结构，顶部节点为最小值，所有的定时器，实际上就是往堆里面不断写入到期时间，即顶部的到期时间最近，他到期了，才有可能到下一层节点上的元素到期</p>\n<p>因此涉及到 堆的更新和查询</p>\n<p>目前定时器使用的堆为四叉堆，目的是为了降低层级，查询时间复杂度为O(log4 N)，查询时间有相比二叉堆有一定提升</p>\n<h4 id=\"Parse-解析时间\"><a href=\"#Parse-解析时间\" class=\"headerlink\" title=\"Parse 解析时间\"></a>Parse 解析时间</h4><p>官方的支持的时间解析格式并不是特别友好，建议使用carbon库来解决相关问题</p>\n<h4 id=\"TimeZone\"><a href=\"#TimeZone\" class=\"headerlink\" title=\"TimeZone\"></a>TimeZone</h4><p>默认解释的时间区为UTC时间，一般情况下，我们转换为字符串时，需要改为 <strong>Asia/Shanghai</strong>时区</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loc, _ := time.LoadLocation(&quot;Asia/Shanghai&quot;)</span><br><span class=\"line\">const shortForm = &quot;2006-Jan-02&quot;</span><br><span class=\"line\">t, _ = time.ParseInLocation(shortForm, &quot;2012-Jul-09&quot;, loc)</span><br><span class=\"line\">fmt.Println(t)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"时间间隔-（Duration）\"><a href=\"#时间间隔-（Duration）\" class=\"headerlink\" title=\"时间间隔 （Duration）\"></a>时间间隔 （Duration）</h4><h5 id=\"字符串解析-time-ParseDuration\"><a href=\"#字符串解析-time-ParseDuration\" class=\"headerlink\" title=\"字符串解析 time.ParseDuration\"></a>字符串解析 <strong>time.ParseDuration</strong></h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//根据字符串解释为时间间隔</span><br><span class=\"line\">//格式 如 10h 1h10m10s 1µs 300ms</span><br><span class=\"line\">// Valid time units are &quot;ns&quot;, &quot;us&quot; (or &quot;µs&quot;), &quot;ms&quot;, &quot;s&quot;, &quot;m&quot;, &quot;h&quot;.</span><br><span class=\"line\">hours, _ := time.ParseDuration(&quot;10h&quot;)</span><br><span class=\"line\">fmt.Printf(&quot;There are %.0f seconds in %v.\\n&quot;, hours.Seconds(), hours)</span><br><span class=\"line\">// There are 36000 seconds in 10h0m0s.</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"计算时间间隔\"><a href=\"#计算时间间隔\" class=\"headerlink\" title=\"计算时间间隔\"></a>计算时间间隔</h5><h5 id=\"time-Since\"><a href=\"#time-Since\" class=\"headerlink\" title=\"time.Since()\"></a>time.Since()</h5><p>如在一些任务执行完毕以后，计算它的耗时</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start := time.Now()</span><br><span class=\"line\">//doSomething</span><br><span class=\"line\">time.Sleep(time.Second * 2)</span><br><span class=\"line\">defer func() &#123;</span><br><span class=\"line\">\ttimeSpent := time.Since(start)</span><br><span class=\"line\">\tfmt.Println(&quot;consume time:&quot; + timeSpent.String())</span><br><span class=\"line\">&#125;()</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">consume time:2.001047625s</span><br></pre></td></tr></table></figure>\n\n\n<h5 id=\"time-Until\"><a href=\"#time-Until\" class=\"headerlink\" title=\"time.Until()\"></a>time.Until()</h5><p>到某个时间的的间隔，负数表示在输入时间之前</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>定时器是很常见的包组件，它的精度是大家需要留意的。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"GO-Time包使用示例\"><a href=\"#GO-Time包使用示例\" class=\"headerlink\" title=\"GO Time包使用示例\"></a>GO Time包使用示例</h1><p>在GO语言中,时间相关的包为<strong>time</strong></p>\n<p>我们可以直接看go源码的src文件，里面有关于timer这个包的test代码</p>\n<p>下面列举部分常用的time相关函数</p>\n<h2 id=\"定时器\"><a href=\"#定时器\" class=\"headerlink\" title=\"定时器\"></a>定时器</h2><h5 id=\"time-After\"><a href=\"#time-After\" class=\"headerlink\" title=\"time.After()\"></a>time.After()</h5><p>在时间结束后往写入通道</p>\n<p>例子如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func ExampleAfter() &#123;</span><br><span class=\"line\">\tselect &#123;</span><br><span class=\"line\">\tcase m := &lt;-c:</span><br><span class=\"line\">\t\thandle(m)</span><br><span class=\"line\">\tcase &lt;-time.After(10 * time.Second):</span><br><span class=\"line\">\t\tfmt.Println(&quot;timed out&quot;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"time-AfterFunc\"><a href=\"#time-AfterFunc\" class=\"headerlink\" title=\"time.AfterFunc()\"></a>time.AfterFunc()</h5><p>固定时间后执行函数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func TestAfterFunc(t *testing.T) &#123;</span><br><span class=\"line\">\tc := make(chan bool)</span><br><span class=\"line\">\tvar f func()</span><br><span class=\"line\">\tfmt.Println(&quot;开始：&quot; + time.Now().String())</span><br><span class=\"line\">\tf = func() &#123;</span><br><span class=\"line\">\t\tfmt.Println(&quot;触发定时：&quot; + time.Now().String())</span><br><span class=\"line\">\t\tc &lt;- true</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttime.AfterFunc(time.Second*10, f)</span><br><span class=\"line\">\t&lt;-c</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">开始：2022-05-14 22:53:18.706485 +0800 CST m=+0.000048501</span><br><span class=\"line\">触发定时：2022-05-14 22:53:28.707644 +0800 CST m=+10.001264751</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"time-Tick\"><a href=\"#time-Tick\" class=\"headerlink\" title=\"time.Tick()\"></a>time.Tick()</h5><p>生成一个定时器，示例如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c := time.Tick(5 * time.Second)</span><br><span class=\"line\">for next := range c &#123;</span><br><span class=\"line\">\tfmt.Printf(&quot;date：%v timeSteamp：%v\\n&quot;, next.Format(time.RFC3339), next.Unix())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\">date：2022-05-14T22:13:53+08:00 timeSteamp：1652537633</span><br><span class=\"line\">date：2022-05-14T22:13:58+08:00 timeSteamp：1652537638</span><br><span class=\"line\">date：2022-05-14T22:14:03+08:00 timeSteamp：1652537643</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n\n<p>这个例子很有意思，原因在于使用range来读取管道，而且并没有提供关闭这个通道的方法，文档提示它不能被GC回收，使用不当会导致内存泄漏</p>\n<p>文档解释说：如果您的程序不需要释放关闭的情况下，使用这个方法是合理的</p>\n<h5 id=\"time-NewTicker\"><a href=\"#time-NewTicker\" class=\"headerlink\" title=\"time.NewTicker()\"></a>time.NewTicker()</h5><p>相比刚刚的tick函数，这个ticker似乎有更完善的机制</p>\n<p>提供<strong>ticker.Stop</strong>来释放资源</p>\n<p>提供<strong>ticker.Reset</strong>来重置</p>\n<p>官方示例如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ticker := time.NewTicker(time.Second)</span><br><span class=\"line\">defer ticker.Stop()</span><br><span class=\"line\">done := make(chan bool)</span><br><span class=\"line\">go func() &#123;</span><br><span class=\"line\">\ttime.Sleep(10 * time.Second)</span><br><span class=\"line\">\tdone &lt;- true</span><br><span class=\"line\">&#125;()</span><br><span class=\"line\">for &#123;</span><br><span class=\"line\">\tselect &#123;</span><br><span class=\"line\">\tcase &lt;-done:</span><br><span class=\"line\">\t\tfmt.Println(&quot;Done!&quot;)</span><br><span class=\"line\">\t\treturn</span><br><span class=\"line\">\tcase t := &lt;-ticker.C:</span><br><span class=\"line\">\t\tfmt.Println(&quot;Current time: &quot;, t)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"定时器准确性\"><a href=\"#定时器准确性\" class=\"headerlink\" title=\"定时器准确性\"></a>定时器准确性</h2><p>定时器实际上也是由CPU轮询触发的，因此必定会遭遇系统中断等情况，导致实际触发时间有差异</p>\n<p>一般而言，目前认为定时器能做到毫秒级的准确性</p>\n<p>需要注意的是go在1.14版本之后的实现，由每个P队列挂载时间堆来实现</p>\n<p>而堆的结构，顶部节点为最小值，所有的定时器，实际上就是往堆里面不断写入到期时间，即顶部的到期时间最近，他到期了，才有可能到下一层节点上的元素到期</p>\n<p>因此涉及到 堆的更新和查询</p>\n<p>目前定时器使用的堆为四叉堆，目的是为了降低层级，查询时间复杂度为O(log4 N)，查询时间有相比二叉堆有一定提升</p>\n<h4 id=\"Parse-解析时间\"><a href=\"#Parse-解析时间\" class=\"headerlink\" title=\"Parse 解析时间\"></a>Parse 解析时间</h4><p>官方的支持的时间解析格式并不是特别友好，建议使用carbon库来解决相关问题</p>\n<h4 id=\"TimeZone\"><a href=\"#TimeZone\" class=\"headerlink\" title=\"TimeZone\"></a>TimeZone</h4><p>默认解释的时间区为UTC时间，一般情况下，我们转换为字符串时，需要改为 <strong>Asia/Shanghai</strong>时区</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loc, _ := time.LoadLocation(&quot;Asia/Shanghai&quot;)</span><br><span class=\"line\">const shortForm = &quot;2006-Jan-02&quot;</span><br><span class=\"line\">t, _ = time.ParseInLocation(shortForm, &quot;2012-Jul-09&quot;, loc)</span><br><span class=\"line\">fmt.Println(t)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"时间间隔-（Duration）\"><a href=\"#时间间隔-（Duration）\" class=\"headerlink\" title=\"时间间隔 （Duration）\"></a>时间间隔 （Duration）</h4><h5 id=\"字符串解析-time-ParseDuration\"><a href=\"#字符串解析-time-ParseDuration\" class=\"headerlink\" title=\"字符串解析 time.ParseDuration\"></a>字符串解析 <strong>time.ParseDuration</strong></h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//根据字符串解释为时间间隔</span><br><span class=\"line\">//格式 如 10h 1h10m10s 1µs 300ms</span><br><span class=\"line\">// Valid time units are &quot;ns&quot;, &quot;us&quot; (or &quot;µs&quot;), &quot;ms&quot;, &quot;s&quot;, &quot;m&quot;, &quot;h&quot;.</span><br><span class=\"line\">hours, _ := time.ParseDuration(&quot;10h&quot;)</span><br><span class=\"line\">fmt.Printf(&quot;There are %.0f seconds in %v.\\n&quot;, hours.Seconds(), hours)</span><br><span class=\"line\">// There are 36000 seconds in 10h0m0s.</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"计算时间间隔\"><a href=\"#计算时间间隔\" class=\"headerlink\" title=\"计算时间间隔\"></a>计算时间间隔</h5><h5 id=\"time-Since\"><a href=\"#time-Since\" class=\"headerlink\" title=\"time.Since()\"></a>time.Since()</h5><p>如在一些任务执行完毕以后，计算它的耗时</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start := time.Now()</span><br><span class=\"line\">//doSomething</span><br><span class=\"line\">time.Sleep(time.Second * 2)</span><br><span class=\"line\">defer func() &#123;</span><br><span class=\"line\">\ttimeSpent := time.Since(start)</span><br><span class=\"line\">\tfmt.Println(&quot;consume time:&quot; + timeSpent.String())</span><br><span class=\"line\">&#125;()</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">consume time:2.001047625s</span><br></pre></td></tr></table></figure>\n\n\n<h5 id=\"time-Until\"><a href=\"#time-Until\" class=\"headerlink\" title=\"time.Until()\"></a>time.Until()</h5><p>到某个时间的的间隔，负数表示在输入时间之前</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>定时器是很常见的包组件，它的精度是大家需要留意的。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cl3br98rd0007pkth0qcpgltt","category_id":"cl3br98rc0004pkth272seuxw","_id":"cl3br98re000cpkthg5e733t0"},{"post_id":"cl3br98r90001pkth2qf16koo","category_id":"cl3br98rc0004pkth272seuxw","_id":"cl3br98re000fpkth1k2ma3ox"},{"post_id":"cl3br98rb0003pkth20sj3zd1","category_id":"cl3br98rd0008pkthg3o16cfc","_id":"cl3br98re000hpkth9zks0vvh"},{"post_id":"cl3br98rc0006pkthdm8phfih","category_id":"cl3br98rc0004pkth272seuxw","_id":"cl3br98re000jpkthf5q0dyl6"}],"PostTag":[{"post_id":"cl3br98rd0007pkth0qcpgltt","tag_id":"cl3br98rc0005pkth2pe24s02","_id":"cl3br98rd000apkthcy915ofe"},{"post_id":"cl3br98r90001pkth2qf16koo","tag_id":"cl3br98rc0005pkth2pe24s02","_id":"cl3br98re000bpkthdkb918vp"},{"post_id":"cl3br98rb0003pkth20sj3zd1","tag_id":"cl3br98rd0009pkth3hak453k","_id":"cl3br98re000gpkthgjul1a69"},{"post_id":"cl3br98rc0006pkthdm8phfih","tag_id":"cl3br98rc0005pkth2pe24s02","_id":"cl3br98re000ipkthddm168v5"}],"Tag":[{"name":"GO语言","_id":"cl3br98rc0005pkth2pe24s02"},{"name":"LINUX命令","_id":"cl3br98rd0009pkth3hak453k"}]}}